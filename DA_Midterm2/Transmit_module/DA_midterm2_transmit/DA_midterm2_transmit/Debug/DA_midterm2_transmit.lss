
DA_midterm2_transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000fc2  00001056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000fc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080011e  0080011e  00001074  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bea  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a42  00000000  00000000  00002e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ae  00000000  00000000  00003858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00004208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000704  00000000  00000000  00004570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f3e  00000000  00000000  00004c74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00005bb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6d 01 	jmp	0x2da	; 0x2da <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  9e:	0c 94 df 07 	jmp	0xfbe	; 0xfbe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
}

void adc_init(void)
{
	/** Setup and enable ADC **/
	ADMUX = 0;					//select ADC0 Pin as input
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
	ADMUX = (0<<REFS1)| 		//Reference Selection Bits
  ac:	80 e6       	ldi	r24, 0x60	; 96
  ae:	80 83       	st	Z, r24
	(1<<REFS0)| 				//AVcc - external cap at AREF
	(1<<ADLAR); 				//ADC right Adjust Result
	
	ADCSRA = (1<<ADEN)| 		//ADC ENable
  b0:	86 ee       	ldi	r24, 0xE6	; 230
  b2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	(0<<ADIF)| 					//ADC Interrupt Flag
	(0<<ADIE)| 					//ADC Interrupt Enable
	(1<<ADPS2)| 				//ADC Prescaler of 64
	(1<<ADPS1)|
	(0<<ADPS0);
	ADCSRB = 0;					//free running mode
  b6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  ba:	08 95       	ret

000000bc <setup_rf>:
}



nRF24L01 *setup_rf(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
  c0:	0e 94 99 01 	call	0x332	; 0x332 <nRF24L01_init>
  c4:	ec 01       	movw	r28, r24

	rf->ss.port = &PORTB;
  c6:	85 e2       	ldi	r24, 0x25	; 37
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	99 83       	std	Y+1, r25	; 0x01
  cc:	88 83       	st	Y, r24
	rf->ss.pin = PB2;
  ce:	22 e0       	ldi	r18, 0x02	; 2
  d0:	2a 83       	std	Y+2, r18	; 0x02
	rf->ce.port = &PORTB;
  d2:	9c 83       	std	Y+4, r25	; 0x04
  d4:	8b 83       	std	Y+3, r24	; 0x03
	rf->ce.pin = PB1;
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	2d 83       	std	Y+5, r18	; 0x05
	rf->sck.port = &PORTB;
  da:	9f 83       	std	Y+7, r25	; 0x07
  dc:	8e 83       	std	Y+6, r24	; 0x06
	rf->sck.pin = PB5;
  de:	25 e0       	ldi	r18, 0x05	; 5
  e0:	28 87       	std	Y+8, r18	; 0x08
	rf->mosi.port = &PORTB;
  e2:	9a 87       	std	Y+10, r25	; 0x0a
  e4:	89 87       	std	Y+9, r24	; 0x09
	rf->mosi.pin = PB3;
  e6:	23 e0       	ldi	r18, 0x03	; 3
  e8:	2b 87       	std	Y+11, r18	; 0x0b
	rf->miso.port = &PORTB;
  ea:	9d 87       	std	Y+13, r25	; 0x0d
  ec:	8c 87       	std	Y+12, r24	; 0x0c
	rf->miso.pin = PB4;
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	8e 87       	std	Y+14, r24	; 0x0e
	// interrupt on falling edge of INT0 (PD2)
	EICRA |= _BV(ISC01);
  f2:	e9 e6       	ldi	r30, 0x69	; 105
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	82 60       	ori	r24, 0x02	; 2
  fa:	80 83       	st	Z, r24
	EIMSK |= _BV(INT0);
  fc:	e8 9a       	sbi	0x1d, 0	; 29
	nRF24L01_begin(rf);
  fe:	ce 01       	movw	r24, r28
 100:	0e 94 0b 02 	call	0x416	; 0x416 <nRF24L01_begin>
	return rf;
}
 104:	ce 01       	movw	r24, r28
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <read_adc>:

void read_adc(void)
{
	
	adc_temp = 0;							//initalize temp to 0
 10c:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <adc_temp+0x1>
 110:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <adc_temp>
	ADCSRA |= (1<<ADSC);					//start the conversion
 114:	ea e7       	ldi	r30, 0x7A	; 122
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF)) == 0);
 11e:	80 81       	ld	r24, Z
 120:	84 ff       	sbrs	r24, 4
 122:	fd cf       	rjmp	.-6      	; 0x11e <read_adc+0x12>
	{
		//wait for conversion to finish
	}
	adc_temp = ADCH;						//get temp value
 124:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <adc_temp+0x1>
 12e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <adc_temp>
 132:	08 95       	ret

00000134 <spi_init>:



void spi_init(void)
{
	DDRB |= (1<<2)|(1<<3)|(1<<5); 		// SCK, MOSI and SS as outputs
 134:	84 b1       	in	r24, 0x04	; 4
 136:	8c 62       	ori	r24, 0x2C	; 44
 138:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<4); 					// MISO as input
 13a:	24 98       	cbi	0x04, 4	; 4
	SPCR |= (1<<MSTR); 					// Set as Master
 13c:	8c b5       	in	r24, 0x2c	; 44
 13e:	80 61       	ori	r24, 0x10	; 16
 140:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPR0)|(1<<SPR1); 		// divided clock by 128
 142:	8c b5       	in	r24, 0x2c	; 44
 144:	83 60       	ori	r24, 0x03	; 3
 146:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<SPE); 					// Enable SPI
 148:	8c b5       	in	r24, 0x2c	; 44
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	8c bd       	out	0x2c, r24	; 44
 14e:	08 95       	ret

00000150 <setup_timer>:
}

// setup timer to trigger interrupt every second when at 8MHz
void setup_timer(void)
{
	TCCR1B |= _BV(WGM12);
 150:	e1 e8       	ldi	r30, 0x81	; 129
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	88 60       	ori	r24, 0x08	; 8
 158:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);
 15a:	af e6       	ldi	r26, 0x6F	; 111
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	8c 91       	ld	r24, X
 160:	82 60       	ori	r24, 0x02	; 2
 162:	8c 93       	st	X, r24
	OCR1A = 31250;
 164:	82 e1       	ldi	r24, 0x12	; 18
 166:	9a e7       	ldi	r25, 0x7A	; 122
 168:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 16c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= _BV(CS12);
 170:	80 81       	ld	r24, Z
 172:	84 60       	ori	r24, 0x04	; 4
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <USART_init>:


/* INIT USART (RS-232) */
void USART_init( unsigned int ubrr )
{
	UBRR0H = (unsigned char)(ubrr>>8);			//set baud rate
 178:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 17c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << TXEN0) | (1 <<RXEN0); 		// Enable receiver, transmitter
 180:	88 e1       	ldi	r24, 0x18	; 24
 182:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01); 	//asynchronous 8-bit data 1 stop bit
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 18c:	08 95       	ret

0000018e <USART_tx_string>:
}

/* SEND A STRING TO THE RS-232*/
void USART_tx_string( char *data )
{
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
	while ((*data != '\0'))
 192:	fc 01       	movw	r30, r24
 194:	20 81       	ld	r18, Z
 196:	22 23       	and	r18, r18
 198:	b1 f0       	breq	.+44     	; 0x1c6 <USART_tx_string+0x38>
 19a:	dc 01       	movw	r26, r24
 19c:	11 96       	adiw	r26, 0x01	; 1
	{
		while (!(UCSR0A & (1 <<UDRE0)))
 19e:	e0 ec       	ldi	r30, 0xC0	; 192
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
		{
			//wait for the transmit buffer to empty
		}
		UDR0 = *data;				//put the data into the empty buffer, which sends the data
 1a2:	c6 ec       	ldi	r28, 0xC6	; 198
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
/* SEND A STRING TO THE RS-232*/
void USART_tx_string( char *data )
{
	while ((*data != '\0'))
	{
		while (!(UCSR0A & (1 <<UDRE0)))
 1a6:	90 81       	ld	r25, Z
 1a8:	95 ff       	sbrs	r25, 5
 1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <USART_tx_string+0x18>
		{
			//wait for the transmit buffer to empty
		}
		UDR0 = *data;				//put the data into the empty buffer, which sends the data
 1ac:	28 83       	st	Y, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	2f e3       	ldi	r18, 0x3F	; 63
 1b0:	8d e0       	ldi	r24, 0x0D	; 13
 1b2:	93 e0       	ldi	r25, 0x03	; 3
 1b4:	21 50       	subi	r18, 0x01	; 1
 1b6:	80 40       	sbci	r24, 0x00	; 0
 1b8:	90 40       	sbci	r25, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <USART_tx_string+0x26>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <USART_tx_string+0x30>
 1be:	00 00       	nop
}

/* SEND A STRING TO THE RS-232*/
void USART_tx_string( char *data )
{
	while ((*data != '\0'))
 1c0:	2d 91       	ld	r18, X+
 1c2:	21 11       	cpse	r18, r1
 1c4:	f0 cf       	rjmp	.-32     	; 0x1a6 <USART_tx_string+0x18>
		}
		UDR0 = *data;				//put the data into the empty buffer, which sends the data
		_delay_ms(125); 			// wait a bit
		data++;
	}
}
 1c6:	df 91       	pop	r29
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <main>:
char outs[20];



int main(void)
{
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	a8 97       	sbiw	r28, 0x28	; 40
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	f8 94       	cli
 1da:	de bf       	out	0x3e, r29	; 62
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	cd bf       	out	0x3d, r28	; 61

	uint8_t to_address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01 };
 1e0:	85 e0       	ldi	r24, 0x05	; 5
 1e2:	e6 e0       	ldi	r30, 0x06	; 6
 1e4:	f1 e0       	ldi	r31, 0x01	; 1
 1e6:	de 01       	movw	r26, r28
 1e8:	11 96       	adiw	r26, 0x01	; 1
 1ea:	01 90       	ld	r0, Z+
 1ec:	0d 92       	st	X+, r0
 1ee:	8a 95       	dec	r24
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <main+0x1e>
	spi_init();										//Initialize SPI 
 1f2:	0e 94 9a 00 	call	0x134	; 0x134 <spi_init>
	USART_init(UBRR_9600); 							//Initialize the USART (RS232 interface)
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 bc 00 	call	0x178	; 0x178 <USART_init>
	USART_tx_string("Connected!\r\n"); 	      		//Display connected
 1fe:	8b e0       	ldi	r24, 0x0B	; 11
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 c7 00 	call	0x18e	; 0x18e <USART_tx_string>
 206:	2f e3       	ldi	r18, 0x3F	; 63
 208:	8d e0       	ldi	r24, 0x0D	; 13
 20a:	93 e0       	ldi	r25, 0x03	; 3
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <main+0x40>
 214:	00 c0       	rjmp	.+0      	; 0x216 <main+0x4a>
 216:	00 00       	nop
	_delay_ms(125); 								//wait a bit
	sei();				
 218:	78 94       	sei
	nRF24L01 *rf = setup_rf();					
 21a:	0e 94 5e 00 	call	0xbc	; 0xbc <setup_rf>
 21e:	8c 01       	movw	r16, r24
	adc_init();										//Initialize ADC conversion
 220:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	setup_timer();									//Set up timer
 224:	0e 94 a8 00 	call	0x150	; 0x150 <setup_timer>
		if (send_message)
		{
			read_adc();											//get converted ADC value
			send_message = false;								
			nRF24L01Message msg;
			snprintf(outs,sizeof(outs),"%3d\r\n", adc_temp);	//convert temp to a string
 228:	0f 2e       	mov	r0, r31
 22a:	f8 e1       	ldi	r31, 0x18	; 24
 22c:	af 2e       	mov	r10, r31
 22e:	f1 e0       	ldi	r31, 0x01	; 1
 230:	bf 2e       	mov	r11, r31
 232:	f0 2d       	mov	r31, r0
 234:	0f 2e       	mov	r0, r31
 236:	f4 e1       	ldi	r31, 0x14	; 20
 238:	9f 2e       	mov	r9, r31
 23a:	f0 2d       	mov	r31, r0
 23c:	0f 2e       	mov	r0, r31
 23e:	f0 e2       	ldi	r31, 0x20	; 32
 240:	ef 2e       	mov	r14, r31
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	ff 2e       	mov	r15, r31
 246:	f0 2d       	mov	r31, r0
			USART_tx_string(outs);								//display the value
			memcpy(msg.data, outs, 3);
 248:	6e 01       	movw	r12, r28
 24a:	e8 e0       	ldi	r30, 0x08	; 8
 24c:	ce 0e       	add	r12, r30
 24e:	d1 1c       	adc	r13, r1



	while (true)
	{
		if (rf_interrupt)
 250:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <rf_interrupt>
 254:	88 23       	and	r24, r24
 256:	51 f0       	breq	.+20     	; 0x26c <main+0xa0>
		{
			rf_interrupt = false;
 258:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <rf_interrupt>
			int success = nRF24L01_transmit_success(rf);
 25c:	c8 01       	movw	r24, r16
 25e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <nRF24L01_transmit_success>
			if (success != 0)
 262:	89 2b       	or	r24, r25
 264:	19 f0       	breq	.+6      	; 0x26c <main+0xa0>
			nRF24L01_flush_transmit_message(rf);
 266:	c8 01       	movw	r24, r16
 268:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <nRF24L01_flush_transmit_message>
		}

		if (send_message)
 26c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <__data_end>
 270:	88 23       	and	r24, r24
 272:	71 f3       	breq	.-36     	; 0x250 <main+0x84>
		{
			read_adc();											//get converted ADC value
 274:	0e 94 86 00 	call	0x10c	; 0x10c <read_adc>
			send_message = false;								
 278:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <__data_end>
			nRF24L01Message msg;
			snprintf(outs,sizeof(outs),"%3d\r\n", adc_temp);	//convert temp to a string
 27c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <adc_temp>
 280:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <adc_temp+0x1>
 284:	9f 93       	push	r25
 286:	8f 93       	push	r24
 288:	bf 92       	push	r11
 28a:	af 92       	push	r10
 28c:	1f 92       	push	r1
 28e:	9f 92       	push	r9
 290:	ff 92       	push	r15
 292:	ef 92       	push	r14
 294:	0e 94 e7 04 	call	0x9ce	; 0x9ce <snprintf>
			USART_tx_string(outs);								//display the value
 298:	c7 01       	movw	r24, r14
 29a:	0e 94 c7 00 	call	0x18e	; 0x18e <USART_tx_string>
			memcpy(msg.data, outs, 3);
 29e:	f7 01       	movw	r30, r14
 2a0:	80 81       	ld	r24, Z
 2a2:	91 81       	ldd	r25, Z+1	; 0x01
 2a4:	f6 01       	movw	r30, r12
 2a6:	91 83       	std	Z+1, r25	; 0x01
 2a8:	80 83       	st	Z, r24
 2aa:	f7 01       	movw	r30, r14
 2ac:	82 81       	ldd	r24, Z+2	; 0x02
 2ae:	f6 01       	movw	r30, r12
 2b0:	82 83       	std	Z+2, r24	; 0x02
			msg.length = strlen((char *)msg.data) + 1;
 2b2:	01 90       	ld	r0, Z+
 2b4:	00 20       	and	r0, r0
 2b6:	e9 f7       	brne	.-6      	; 0x2b2 <main+0xe6>
 2b8:	ec 19       	sub	r30, r12
 2ba:	e8 a7       	std	Y+40, r30	; 0x28
			nRF24L01_transmit(rf, to_address, &msg);			//transmit the value to receiver
 2bc:	ae 01       	movw	r20, r28
 2be:	4a 5f       	subi	r20, 0xFA	; 250
 2c0:	5f 4f       	sbci	r21, 0xFF	; 255
 2c2:	be 01       	movw	r22, r28
 2c4:	6f 5f       	subi	r22, 0xFF	; 255
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	c8 01       	movw	r24, r16
 2ca:	0e 94 03 03 	call	0x606	; 0x606 <nRF24L01_transmit>
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	f8 94       	cli
 2d2:	de bf       	out	0x3e, r29	; 62
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	cd bf       	out	0x3d, r28	; 61
 2d8:	bb cf       	rjmp	.-138    	; 0x250 <main+0x84>

000002da <__vector_11>:
	}
}

// each one second interrupt
ISR(TIMER1_COMPA_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	8f 93       	push	r24
	send_message = true;		
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <__data_end>
	TIFR1 |= (1<<OCF1A);
 2ec:	b1 9a       	sbi	0x16, 1	; 22
}
 2ee:	8f 91       	pop	r24
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_1>:

// nRF24L01 interrupt
ISR(INT0_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	8f 93       	push	r24
	rf_interrupt = true;
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <rf_interrupt>
	EIFR |= (1<<INTF0);
 30c:	e0 9a       	sbi	0x1c, 0	; 28
}
 30e:	8f 91       	pop	r24
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 31a:	fc 01       	movw	r30, r24
 31c:	a6 2f       	mov	r26, r22
 31e:	b7 2f       	mov	r27, r23
 320:	9c 01       	movw	r18, r24
 322:	2b 5f       	subi	r18, 0xFB	; 251
 324:	3f 4f       	sbci	r19, 0xFF	; 255
 326:	91 91       	ld	r25, Z+
 328:	9d 93       	st	X+, r25
 32a:	e2 17       	cp	r30, r18
 32c:	f3 07       	cpc	r31, r19
 32e:	d9 f7       	brne	.-10     	; 0x326 <copy_address+0xc>
 330:	08 95       	ret

00000332 <nRF24L01_init>:
 332:	80 e1       	ldi	r24, 0x10	; 16
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	0e 94 c6 03 	call	0x78c	; 0x78c <malloc>
 33a:	20 e1       	ldi	r18, 0x10	; 16
 33c:	fc 01       	movw	r30, r24
 33e:	11 92       	st	Z+, r1
 340:	2a 95       	dec	r18
 342:	e9 f7       	brne	.-6      	; 0x33e <nRF24L01_init+0xc>
 344:	08 95       	ret

00000346 <nRF24L01_send_command>:
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	ec 01       	movw	r28, r24
 34c:	da 01       	movw	r26, r20
 34e:	e8 81       	ld	r30, Y
 350:	f9 81       	ldd	r31, Y+1	; 0x01
 352:	50 81       	ld	r21, Z
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0a 80       	ldd	r0, Y+2	; 0x02
 35a:	02 c0       	rjmp	.+4      	; 0x360 <nRF24L01_send_command+0x1a>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	0a 94       	dec	r0
 362:	e2 f7       	brpl	.-8      	; 0x35c <nRF24L01_send_command+0x16>
 364:	80 95       	com	r24
 366:	85 23       	and	r24, r21
 368:	80 83       	st	Z, r24
 36a:	6e bd       	out	0x2e, r22	; 46
 36c:	0d b4       	in	r0, 0x2d	; 45
 36e:	07 fe       	sbrs	r0, 7
 370:	fd cf       	rjmp	.-6      	; 0x36c <nRF24L01_send_command+0x26>
 372:	8e b5       	in	r24, 0x2e	; 46
 374:	8f 87       	std	Y+15, r24	; 0x0f
 376:	21 15       	cp	r18, r1
 378:	31 05       	cpc	r19, r1
 37a:	79 f0       	breq	.+30     	; 0x39a <nRF24L01_send_command+0x54>
 37c:	fd 01       	movw	r30, r26
 37e:	2a 0f       	add	r18, r26
 380:	3b 1f       	adc	r19, r27
 382:	df 01       	movw	r26, r30
 384:	90 81       	ld	r25, Z
 386:	9e bd       	out	0x2e, r25	; 46
 388:	0d b4       	in	r0, 0x2d	; 45
 38a:	07 fe       	sbrs	r0, 7
 38c:	fd cf       	rjmp	.-6      	; 0x388 <nRF24L01_send_command+0x42>
 38e:	9e b5       	in	r25, 0x2e	; 46
 390:	9c 93       	st	X, r25
 392:	31 96       	adiw	r30, 0x01	; 1
 394:	e2 17       	cp	r30, r18
 396:	f3 07       	cpc	r31, r19
 398:	a1 f7       	brne	.-24     	; 0x382 <nRF24L01_send_command+0x3c>
 39a:	e8 81       	ld	r30, Y
 39c:	f9 81       	ldd	r31, Y+1	; 0x01
 39e:	20 81       	ld	r18, Z
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0a 80       	ldd	r0, Y+2	; 0x02
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <nRF24L01_send_command+0x66>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <nRF24L01_send_command+0x62>
 3b0:	82 2b       	or	r24, r18
 3b2:	80 83       	st	Z, r24
 3b4:	8f 85       	ldd	r24, Y+15	; 0x0f
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <nRF24L01_write_register>:
 3bc:	60 62       	ori	r22, 0x20	; 32
 3be:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_send_command>
 3c2:	08 95       	ret

000003c4 <nRF24L01_read_register>:
 3c4:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_send_command>
 3c8:	08 95       	ret

000003ca <nRF24L01_no_op>:
 3ca:	20 e0       	ldi	r18, 0x00	; 0
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	6f ef       	ldi	r22, 0xFF	; 255
 3d4:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_send_command>
 3d8:	08 95       	ret

000003da <nRF24L01_update_status>:
 3da:	0e 94 e5 01 	call	0x3ca	; 0x3ca <nRF24L01_no_op>
 3de:	08 95       	ret

000003e0 <nRF24L01_flush_transmit_message>:
 3e0:	20 e0       	ldi	r18, 0x00	; 0
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	40 e0       	ldi	r20, 0x00	; 0
 3e6:	50 e0       	ldi	r21, 0x00	; 0
 3e8:	61 ee       	ldi	r22, 0xE1	; 225
 3ea:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_send_command>
 3ee:	08 95       	ret

000003f0 <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
 3f0:	cf 93       	push	r28
 3f2:	df 93       	push	r29
 3f4:	1f 92       	push	r1
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
 3fa:	20 e7       	ldi	r18, 0x70	; 112
 3fc:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	ae 01       	movw	r20, r28
 404:	4f 5f       	subi	r20, 0xFF	; 255
 406:	5f 4f       	sbci	r21, 0xFF	; 255
 408:	67 e0       	ldi	r22, 0x07	; 7
 40a:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>
}
 40e:	0f 90       	pop	r0
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
 416:	ff 92       	push	r15
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	1f 92       	push	r1
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 428:	dc 01       	movw	r26, r24
 42a:	ed 91       	ld	r30, X+
 42c:	fc 91       	ld	r31, X
 42e:	11 97       	sbiw	r26, 0x01	; 1
 430:	42 91       	ld	r20, -Z
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	9c 01       	movw	r18, r24
 438:	12 96       	adiw	r26, 0x02	; 2
 43a:	0c 90       	ld	r0, X
 43c:	12 97       	sbiw	r26, 0x02	; 2
 43e:	02 c0       	rjmp	.+4      	; 0x444 <nRF24L01_begin+0x2e>
 440:	22 0f       	add	r18, r18
 442:	33 1f       	adc	r19, r19
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <nRF24L01_begin+0x2a>
 448:	24 2b       	or	r18, r20
 44a:	20 83       	st	Z, r18
 44c:	13 96       	adiw	r26, 0x03	; 3
 44e:	ed 91       	ld	r30, X+
 450:	fc 91       	ld	r31, X
 452:	14 97       	sbiw	r26, 0x04	; 4
 454:	42 91       	ld	r20, -Z
 456:	9c 01       	movw	r18, r24
 458:	15 96       	adiw	r26, 0x05	; 5
 45a:	0c 90       	ld	r0, X
 45c:	15 97       	sbiw	r26, 0x05	; 5
 45e:	02 c0       	rjmp	.+4      	; 0x464 <nRF24L01_begin+0x4e>
 460:	22 0f       	add	r18, r18
 462:	33 1f       	adc	r19, r19
 464:	0a 94       	dec	r0
 466:	e2 f7       	brpl	.-8      	; 0x460 <nRF24L01_begin+0x4a>
 468:	24 2b       	or	r18, r20
 46a:	20 83       	st	Z, r18
 46c:	ed 91       	ld	r30, X+
 46e:	fc 91       	ld	r31, X
 470:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 472:	40 81       	ld	r20, Z
 474:	9c 01       	movw	r18, r24
 476:	12 96       	adiw	r26, 0x02	; 2
 478:	0c 90       	ld	r0, X
 47a:	12 97       	sbiw	r26, 0x02	; 2
 47c:	02 c0       	rjmp	.+4      	; 0x482 <nRF24L01_begin+0x6c>
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <nRF24L01_begin+0x68>
 486:	24 2b       	or	r18, r20
 488:	20 83       	st	Z, r18
 48a:	13 96       	adiw	r26, 0x03	; 3
 48c:	ed 91       	ld	r30, X+
 48e:	fc 91       	ld	r31, X
 490:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 492:	30 81       	ld	r19, Z
 494:	ac 01       	movw	r20, r24
 496:	15 96       	adiw	r26, 0x05	; 5
 498:	0c 90       	ld	r0, X
 49a:	15 97       	sbiw	r26, 0x05	; 5
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <nRF24L01_begin+0x8c>
 49e:	44 0f       	add	r20, r20
 4a0:	55 1f       	adc	r21, r21
 4a2:	0a 94       	dec	r0
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <nRF24L01_begin+0x88>
 4a6:	24 2f       	mov	r18, r20
 4a8:	20 95       	com	r18
 4aa:	23 23       	and	r18, r19
 4ac:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
 4ae:	2c b5       	in	r18, 0x2c	; 44
 4b0:	20 61       	ori	r18, 0x10	; 16
 4b2:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= _BV(SPE);
 4b4:	2c b5       	in	r18, 0x2c	; 44
 4b6:	20 64       	ori	r18, 0x40	; 64
 4b8:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 4ba:	16 96       	adiw	r26, 0x06	; 6
 4bc:	ed 91       	ld	r30, X+
 4be:	fc 91       	ld	r31, X
 4c0:	17 97       	sbiw	r26, 0x07	; 7
 4c2:	42 91       	ld	r20, -Z
 4c4:	9c 01       	movw	r18, r24
 4c6:	18 96       	adiw	r26, 0x08	; 8
 4c8:	0c 90       	ld	r0, X
 4ca:	18 97       	sbiw	r26, 0x08	; 8
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <nRF24L01_begin+0xbc>
 4ce:	22 0f       	add	r18, r18
 4d0:	33 1f       	adc	r19, r19
 4d2:	0a 94       	dec	r0
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <nRF24L01_begin+0xb8>
 4d6:	24 2b       	or	r18, r20
 4d8:	20 83       	st	Z, r18
 4da:	19 96       	adiw	r26, 0x09	; 9
 4dc:	ed 91       	ld	r30, X+
 4de:	fc 91       	ld	r31, X
 4e0:	1a 97       	sbiw	r26, 0x0a	; 10
 4e2:	42 91       	ld	r20, -Z
 4e4:	9c 01       	movw	r18, r24
 4e6:	1b 96       	adiw	r26, 0x0b	; 11
 4e8:	0c 90       	ld	r0, X
 4ea:	1b 97       	sbiw	r26, 0x0b	; 11
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <nRF24L01_begin+0xdc>
 4ee:	22 0f       	add	r18, r18
 4f0:	33 1f       	adc	r19, r19
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <nRF24L01_begin+0xd8>
 4f6:	24 2b       	or	r18, r20
 4f8:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
 4fa:	1c 96       	adiw	r26, 0x0c	; 12
 4fc:	ed 91       	ld	r30, X+
 4fe:	fc 91       	ld	r31, X
 500:	1d 97       	sbiw	r26, 0x0d	; 13
 502:	22 91       	ld	r18, -Z
 504:	1e 96       	adiw	r26, 0x0e	; 14
 506:	0c 90       	ld	r0, X
 508:	02 c0       	rjmp	.+4      	; 0x50e <nRF24L01_begin+0xf8>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <nRF24L01_begin+0xf4>
 512:	80 95       	com	r24
 514:	82 23       	and	r24, r18
 516:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
 518:	8c b5       	in	r24, 0x2c	; 44
 51a:	87 7f       	andi	r24, 0xF7	; 247
 51c:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
 51e:	8c b5       	in	r24, 0x2c	; 44
 520:	8b 7f       	andi	r24, 0xFB	; 251
 522:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
 524:	8c b5       	in	r24, 0x2c	; 44
 526:	8e 7f       	andi	r24, 0xFE	; 254
 528:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
 52a:	8c b5       	in	r24, 0x2c	; 44
 52c:	8d 7f       	andi	r24, 0xFD	; 253
 52e:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
 530:	8d b5       	in	r24, 0x2d	; 45
 532:	81 60       	ori	r24, 0x01	; 1
 534:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
 536:	8c b5       	in	r24, 0x2c	; 44
 538:	8f 7d       	andi	r24, 0xDF	; 223
 53a:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
 53c:	20 e0       	ldi	r18, 0x00	; 0
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	40 e0       	ldi	r20, 0x00	; 0
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	62 ee       	ldi	r22, 0xE2	; 226
 546:	c8 01       	movw	r24, r16
 548:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	40 e0       	ldi	r20, 0x00	; 0
 552:	50 e0       	ldi	r21, 0x00	; 0
 554:	61 ee       	ldi	r22, 0xE1	; 225
 556:	c8 01       	movw	r24, r16
 558:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
 55c:	c8 01       	movw	r24, r16
 55e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
 562:	8f e0       	ldi	r24, 0x0F	; 15
 564:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	ae 01       	movw	r20, r28
 56c:	4f 5f       	subi	r20, 0xFF	; 255
 56e:	5f 4f       	sbci	r21, 0xFF	; 255
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	c8 01       	movw	r24, r16
 574:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
 578:	0f 2e       	mov	r0, r31
 57a:	ff e3       	ldi	r31, 0x3F	; 63
 57c:	ff 2e       	mov	r15, r31
 57e:	f0 2d       	mov	r31, r0
 580:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
 582:	21 e0       	ldi	r18, 0x01	; 1
 584:	30 e0       	ldi	r19, 0x00	; 0
 586:	ae 01       	movw	r20, r28
 588:	4f 5f       	subi	r20, 0xFF	; 255
 58a:	5f 4f       	sbci	r21, 0xFF	; 255
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	c8 01       	movw	r24, r16
 590:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>

    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
 594:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	ae 01       	movw	r20, r28
 59c:	4f 5f       	subi	r20, 0xFF	; 255
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	6c e1       	ldi	r22, 0x1C	; 28
 5a2:	c8 01       	movw	r24, r16
 5a4:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
 5a8:	84 e0       	ldi	r24, 0x04	; 4
 5aa:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	ae 01       	movw	r20, r28
 5b2:	4f 5f       	subi	r20, 0xFF	; 255
 5b4:	5f 4f       	sbci	r21, 0xFF	; 255
 5b6:	6d e1       	ldi	r22, 0x1D	; 29
 5b8:	c8 01       	movw	r24, r16
 5ba:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
 5be:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
 5c0:	21 e0       	ldi	r18, 0x01	; 1
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	ae 01       	movw	r20, r28
 5c6:	4f 5f       	subi	r20, 0xFF	; 255
 5c8:	5f 4f       	sbci	r21, 0xFF	; 255
 5ca:	62 e0       	ldi	r22, 0x02	; 2
 5cc:	c8 01       	movw	r24, r16
 5ce:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>
}
 5d2:	0f 90       	pop	r0
 5d4:	df 91       	pop	r29
 5d6:	cf 91       	pop	r28
 5d8:	1f 91       	pop	r17
 5da:	0f 91       	pop	r16
 5dc:	ff 90       	pop	r15
 5de:	08 95       	ret

000005e0 <nRF24L01_clear_transmit_interrupts>:
void nRF24L01_clear_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
 5e0:	cf 93       	push	r28
 5e2:	df 93       	push	r29
 5e4:	1f 92       	push	r1
 5e6:	cd b7       	in	r28, 0x3d	; 61
 5e8:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
 5ea:	20 e3       	ldi	r18, 0x30	; 48
 5ec:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 5ee:	21 e0       	ldi	r18, 0x01	; 1
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	ae 01       	movw	r20, r28
 5f4:	4f 5f       	subi	r20, 0xFF	; 255
 5f6:	5f 4f       	sbci	r21, 0xFF	; 255
 5f8:	67 e0       	ldi	r22, 0x07	; 7
 5fa:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>
}
 5fe:	0f 90       	pop	r0
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	08 95       	ret

00000606 <nRF24L01_transmit>:
int nRF24L01_pipe_number_received(nRF24L01 *rf) {
    int pipe_number = (rf->status & RX_P_NO_MASK) >> 1;
    return pipe_number <= 5 ? pipe_number : -1;
}

void nRF24L01_transmit(nRF24L01 *rf, void *address, nRF24L01Message *msg) {
 606:	cf 92       	push	r12
 608:	df 92       	push	r13
 60a:	ef 92       	push	r14
 60c:	ff 92       	push	r15
 60e:	0f 93       	push	r16
 610:	1f 93       	push	r17
 612:	cf 93       	push	r28
 614:	df 93       	push	r29
 616:	00 d0       	rcall	.+0      	; 0x618 <nRF24L01_transmit+0x12>
 618:	00 d0       	rcall	.+0      	; 0x61a <nRF24L01_transmit+0x14>
 61a:	00 d0       	rcall	.+0      	; 0x61c <nRF24L01_transmit+0x16>
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
 620:	8c 01       	movw	r16, r24
 622:	6b 01       	movw	r12, r22
 624:	7a 01       	movw	r14, r20
    nRF24L01_clear_transmit_interrupts(rf);
 626:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <nRF24L01_clear_transmit_interrupts>
    uint8_t addr[5];
    copy_address((uint8_t *)address, addr);
 62a:	be 01       	movw	r22, r28
 62c:	6f 5f       	subi	r22, 0xFF	; 255
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	c6 01       	movw	r24, r12
 632:	0e 94 8d 01 	call	0x31a	; 0x31a <copy_address>
    nRF24L01_write_register(rf, TX_ADDR, addr, 5);
 636:	25 e0       	ldi	r18, 0x05	; 5
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	ae 01       	movw	r20, r28
 63c:	4f 5f       	subi	r20, 0xFF	; 255
 63e:	5f 4f       	sbci	r21, 0xFF	; 255
 640:	60 e1       	ldi	r22, 0x10	; 16
 642:	c8 01       	movw	r24, r16
 644:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>
    copy_address((uint8_t *)address, addr);
 648:	be 01       	movw	r22, r28
 64a:	6f 5f       	subi	r22, 0xFF	; 255
 64c:	7f 4f       	sbci	r23, 0xFF	; 255
 64e:	c6 01       	movw	r24, r12
 650:	0e 94 8d 01 	call	0x31a	; 0x31a <copy_address>
    nRF24L01_write_register(rf, RX_ADDR_P0, addr, 5);
 654:	25 e0       	ldi	r18, 0x05	; 5
 656:	30 e0       	ldi	r19, 0x00	; 0
 658:	ae 01       	movw	r20, r28
 65a:	4f 5f       	subi	r20, 0xFF	; 255
 65c:	5f 4f       	sbci	r21, 0xFF	; 255
 65e:	6a e0       	ldi	r22, 0x0A	; 10
 660:	c8 01       	movw	r24, r16
 662:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>
    nRF24L01_send_command(rf, W_TX_PAYLOAD, &msg->data, msg->length);
 666:	d7 01       	movw	r26, r14
 668:	92 96       	adiw	r26, 0x22	; 34
 66a:	2c 91       	ld	r18, X
 66c:	30 e0       	ldi	r19, 0x00	; 0
 66e:	a7 01       	movw	r20, r14
 670:	4e 5f       	subi	r20, 0xFE	; 254
 672:	5f 4f       	sbci	r21, 0xFF	; 255
 674:	60 ea       	ldi	r22, 0xA0	; 160
 676:	c8 01       	movw	r24, r16
 678:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_send_command>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
 67c:	21 e0       	ldi	r18, 0x01	; 1
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	ae 01       	movw	r20, r28
 682:	4a 5f       	subi	r20, 0xFA	; 250
 684:	5f 4f       	sbci	r21, 0xFF	; 255
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	c8 01       	movw	r24, r16
 68a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <nRF24L01_read_register>
    config &= ~_BV(PRIM_RX);
 68e:	8e 81       	ldd	r24, Y+6	; 0x06
 690:	8e 7f       	andi	r24, 0xFE	; 254
 692:	8e 83       	std	Y+6, r24	; 0x06
    nRF24L01_write_register(rf, CONFIG, &config, 1);
 694:	21 e0       	ldi	r18, 0x01	; 1
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	ae 01       	movw	r20, r28
 69a:	4a 5f       	subi	r20, 0xFA	; 250
 69c:	5f 4f       	sbci	r21, 0xFF	; 255
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	c8 01       	movw	r24, r16
 6a2:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>
 6a6:	d8 01       	movw	r26, r16
 6a8:	13 96       	adiw	r26, 0x03	; 3
 6aa:	ed 91       	ld	r30, X+
 6ac:	fc 91       	ld	r31, X
 6ae:	14 97       	sbiw	r26, 0x04	; 4
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 6b0:	20 81       	ld	r18, Z
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	15 96       	adiw	r26, 0x05	; 5
 6b8:	0c 90       	ld	r0, X
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <nRF24L01_transmit+0xba>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	0a 94       	dec	r0
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <nRF24L01_transmit+0xb6>
 6c4:	82 2b       	or	r24, r18
 6c6:	80 83       	st	Z, r24
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 6c8:	26 96       	adiw	r28, 0x06	; 6
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	f8 94       	cli
 6ce:	de bf       	out	0x3e, r29	; 62
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	cd bf       	out	0x3d, r28	; 61
 6d4:	df 91       	pop	r29
 6d6:	cf 91       	pop	r28
 6d8:	1f 91       	pop	r17
 6da:	0f 91       	pop	r16
 6dc:	ff 90       	pop	r15
 6de:	ef 90       	pop	r14
 6e0:	df 90       	pop	r13
 6e2:	cf 90       	pop	r12
 6e4:	08 95       	ret

000006e6 <nRF24L01_transmit_success>:

int nRF24L01_transmit_success(nRF24L01 *rf) {
 6e6:	ef 92       	push	r14
 6e8:	ff 92       	push	r15
 6ea:	0f 93       	push	r16
 6ec:	1f 93       	push	r17
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
 6f2:	1f 92       	push	r1
 6f4:	cd b7       	in	r28, 0x3d	; 61
 6f6:	de b7       	in	r29, 0x3e	; 62
 6f8:	8c 01       	movw	r16, r24
 6fa:	dc 01       	movw	r26, r24
 6fc:	13 96       	adiw	r26, 0x03	; 3
 6fe:	ed 91       	ld	r30, X+
 700:	fc 91       	ld	r31, X
 702:	14 97       	sbiw	r26, 0x04	; 4
inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 704:	20 81       	ld	r18, Z
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	90 e0       	ldi	r25, 0x00	; 0
 70a:	15 96       	adiw	r26, 0x05	; 5
 70c:	0c 90       	ld	r0, X
 70e:	02 c0       	rjmp	.+4      	; 0x714 <nRF24L01_transmit_success+0x2e>
 710:	88 0f       	add	r24, r24
 712:	99 1f       	adc	r25, r25
 714:	0a 94       	dec	r0
 716:	e2 f7       	brpl	.-8      	; 0x710 <nRF24L01_transmit_success+0x2a>
 718:	80 95       	com	r24
 71a:	82 23       	and	r24, r18
 71c:	80 83       	st	Z, r24
    set_high(rf->ce);
}

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
 71e:	c8 01       	movw	r24, r16
 720:	0e 94 ed 01 	call	0x3da	; 0x3da <nRF24L01_update_status>
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
 724:	f8 01       	movw	r30, r16
 726:	87 85       	ldd	r24, Z+15	; 0x0f
 728:	85 fd       	sbrc	r24, 5
 72a:	09 c0       	rjmp	.+18     	; 0x73e <nRF24L01_transmit_success+0x58>
    else if (rf->status & _BV(MAX_RT)) success = -1;
 72c:	84 fd       	sbrc	r24, 4
 72e:	0a c0       	rjmp	.+20     	; 0x744 <nRF24L01_transmit_success+0x5e>
    else success = -2;
 730:	0f 2e       	mov	r0, r31
 732:	fe ef       	ldi	r31, 0xFE	; 254
 734:	ef 2e       	mov	r14, r31
 736:	ff 24       	eor	r15, r15
 738:	fa 94       	dec	r15
 73a:	f0 2d       	mov	r31, r0
 73c:	06 c0       	rjmp	.+12     	; 0x74a <nRF24L01_transmit_success+0x64>

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
 73e:	e1 2c       	mov	r14, r1
 740:	f1 2c       	mov	r15, r1
 742:	03 c0       	rjmp	.+6      	; 0x74a <nRF24L01_transmit_success+0x64>
    else if (rf->status & _BV(MAX_RT)) success = -1;
 744:	ee 24       	eor	r14, r14
 746:	ea 94       	dec	r14
 748:	fe 2c       	mov	r15, r14
    else success = -2;
    nRF24L01_clear_transmit_interrupts(rf);
 74a:	c8 01       	movw	r24, r16
 74c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <nRF24L01_clear_transmit_interrupts>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
 750:	21 e0       	ldi	r18, 0x01	; 1
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	ae 01       	movw	r20, r28
 756:	4f 5f       	subi	r20, 0xFF	; 255
 758:	5f 4f       	sbci	r21, 0xFF	; 255
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	c8 01       	movw	r24, r16
 75e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <nRF24L01_read_register>
    config |= _BV(PRIM_RX);
 762:	89 81       	ldd	r24, Y+1	; 0x01
 764:	81 60       	ori	r24, 0x01	; 1
 766:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &config, 1);
 768:	21 e0       	ldi	r18, 0x01	; 1
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	ae 01       	movw	r20, r28
 76e:	4f 5f       	subi	r20, 0xFF	; 255
 770:	5f 4f       	sbci	r21, 0xFF	; 255
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	c8 01       	movw	r24, r16
 776:	0e 94 de 01 	call	0x3bc	; 0x3bc <nRF24L01_write_register>
    return success;
}
 77a:	c7 01       	movw	r24, r14
 77c:	0f 90       	pop	r0
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	1f 91       	pop	r17
 784:	0f 91       	pop	r16
 786:	ff 90       	pop	r15
 788:	ef 90       	pop	r14
 78a:	08 95       	ret

0000078c <malloc>:
 78c:	0f 93       	push	r16
 78e:	1f 93       	push	r17
 790:	cf 93       	push	r28
 792:	df 93       	push	r29
 794:	82 30       	cpi	r24, 0x02	; 2
 796:	91 05       	cpc	r25, r1
 798:	10 f4       	brcc	.+4      	; 0x79e <malloc+0x12>
 79a:	82 e0       	ldi	r24, 0x02	; 2
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <__flp>
 7a2:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <__flp+0x1>
 7a6:	20 e0       	ldi	r18, 0x00	; 0
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	a0 e0       	ldi	r26, 0x00	; 0
 7ac:	b0 e0       	ldi	r27, 0x00	; 0
 7ae:	30 97       	sbiw	r30, 0x00	; 0
 7b0:	19 f1       	breq	.+70     	; 0x7f8 <malloc+0x6c>
 7b2:	40 81       	ld	r20, Z
 7b4:	51 81       	ldd	r21, Z+1	; 0x01
 7b6:	02 81       	ldd	r16, Z+2	; 0x02
 7b8:	13 81       	ldd	r17, Z+3	; 0x03
 7ba:	48 17       	cp	r20, r24
 7bc:	59 07       	cpc	r21, r25
 7be:	c8 f0       	brcs	.+50     	; 0x7f2 <malloc+0x66>
 7c0:	84 17       	cp	r24, r20
 7c2:	95 07       	cpc	r25, r21
 7c4:	69 f4       	brne	.+26     	; 0x7e0 <malloc+0x54>
 7c6:	10 97       	sbiw	r26, 0x00	; 0
 7c8:	31 f0       	breq	.+12     	; 0x7d6 <malloc+0x4a>
 7ca:	12 96       	adiw	r26, 0x02	; 2
 7cc:	0c 93       	st	X, r16
 7ce:	12 97       	sbiw	r26, 0x02	; 2
 7d0:	13 96       	adiw	r26, 0x03	; 3
 7d2:	1c 93       	st	X, r17
 7d4:	27 c0       	rjmp	.+78     	; 0x824 <malloc+0x98>
 7d6:	00 93 38 01 	sts	0x0138, r16	; 0x800138 <__flp>
 7da:	10 93 39 01 	sts	0x0139, r17	; 0x800139 <__flp+0x1>
 7de:	22 c0       	rjmp	.+68     	; 0x824 <malloc+0x98>
 7e0:	21 15       	cp	r18, r1
 7e2:	31 05       	cpc	r19, r1
 7e4:	19 f0       	breq	.+6      	; 0x7ec <malloc+0x60>
 7e6:	42 17       	cp	r20, r18
 7e8:	53 07       	cpc	r21, r19
 7ea:	18 f4       	brcc	.+6      	; 0x7f2 <malloc+0x66>
 7ec:	9a 01       	movw	r18, r20
 7ee:	bd 01       	movw	r22, r26
 7f0:	ef 01       	movw	r28, r30
 7f2:	df 01       	movw	r26, r30
 7f4:	f8 01       	movw	r30, r16
 7f6:	db cf       	rjmp	.-74     	; 0x7ae <malloc+0x22>
 7f8:	21 15       	cp	r18, r1
 7fa:	31 05       	cpc	r19, r1
 7fc:	f9 f0       	breq	.+62     	; 0x83c <malloc+0xb0>
 7fe:	28 1b       	sub	r18, r24
 800:	39 0b       	sbc	r19, r25
 802:	24 30       	cpi	r18, 0x04	; 4
 804:	31 05       	cpc	r19, r1
 806:	80 f4       	brcc	.+32     	; 0x828 <malloc+0x9c>
 808:	8a 81       	ldd	r24, Y+2	; 0x02
 80a:	9b 81       	ldd	r25, Y+3	; 0x03
 80c:	61 15       	cp	r22, r1
 80e:	71 05       	cpc	r23, r1
 810:	21 f0       	breq	.+8      	; 0x81a <malloc+0x8e>
 812:	fb 01       	movw	r30, r22
 814:	93 83       	std	Z+3, r25	; 0x03
 816:	82 83       	std	Z+2, r24	; 0x02
 818:	04 c0       	rjmp	.+8      	; 0x822 <malloc+0x96>
 81a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <__flp+0x1>
 81e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__flp>
 822:	fe 01       	movw	r30, r28
 824:	32 96       	adiw	r30, 0x02	; 2
 826:	44 c0       	rjmp	.+136    	; 0x8b0 <malloc+0x124>
 828:	fe 01       	movw	r30, r28
 82a:	e2 0f       	add	r30, r18
 82c:	f3 1f       	adc	r31, r19
 82e:	81 93       	st	Z+, r24
 830:	91 93       	st	Z+, r25
 832:	22 50       	subi	r18, 0x02	; 2
 834:	31 09       	sbc	r19, r1
 836:	39 83       	std	Y+1, r19	; 0x01
 838:	28 83       	st	Y, r18
 83a:	3a c0       	rjmp	.+116    	; 0x8b0 <malloc+0x124>
 83c:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__brkval>
 840:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__brkval+0x1>
 844:	23 2b       	or	r18, r19
 846:	41 f4       	brne	.+16     	; 0x858 <malloc+0xcc>
 848:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 84c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 850:	30 93 37 01 	sts	0x0137, r19	; 0x800137 <__brkval+0x1>
 854:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__brkval>
 858:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 85c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 860:	21 15       	cp	r18, r1
 862:	31 05       	cpc	r19, r1
 864:	41 f4       	brne	.+16     	; 0x876 <malloc+0xea>
 866:	2d b7       	in	r18, 0x3d	; 61
 868:	3e b7       	in	r19, 0x3e	; 62
 86a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 86e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 872:	24 1b       	sub	r18, r20
 874:	35 0b       	sbc	r19, r21
 876:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <__brkval>
 87a:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <__brkval+0x1>
 87e:	e2 17       	cp	r30, r18
 880:	f3 07       	cpc	r31, r19
 882:	a0 f4       	brcc	.+40     	; 0x8ac <malloc+0x120>
 884:	2e 1b       	sub	r18, r30
 886:	3f 0b       	sbc	r19, r31
 888:	28 17       	cp	r18, r24
 88a:	39 07       	cpc	r19, r25
 88c:	78 f0       	brcs	.+30     	; 0x8ac <malloc+0x120>
 88e:	ac 01       	movw	r20, r24
 890:	4e 5f       	subi	r20, 0xFE	; 254
 892:	5f 4f       	sbci	r21, 0xFF	; 255
 894:	24 17       	cp	r18, r20
 896:	35 07       	cpc	r19, r21
 898:	48 f0       	brcs	.+18     	; 0x8ac <malloc+0x120>
 89a:	4e 0f       	add	r20, r30
 89c:	5f 1f       	adc	r21, r31
 89e:	50 93 37 01 	sts	0x0137, r21	; 0x800137 <__brkval+0x1>
 8a2:	40 93 36 01 	sts	0x0136, r20	; 0x800136 <__brkval>
 8a6:	81 93       	st	Z+, r24
 8a8:	91 93       	st	Z+, r25
 8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <malloc+0x124>
 8ac:	e0 e0       	ldi	r30, 0x00	; 0
 8ae:	f0 e0       	ldi	r31, 0x00	; 0
 8b0:	cf 01       	movw	r24, r30
 8b2:	df 91       	pop	r29
 8b4:	cf 91       	pop	r28
 8b6:	1f 91       	pop	r17
 8b8:	0f 91       	pop	r16
 8ba:	08 95       	ret

000008bc <free>:
 8bc:	cf 93       	push	r28
 8be:	df 93       	push	r29
 8c0:	00 97       	sbiw	r24, 0x00	; 0
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <free+0xa>
 8c4:	81 c0       	rjmp	.+258    	; 0x9c8 <__stack+0xc9>
 8c6:	fc 01       	movw	r30, r24
 8c8:	32 97       	sbiw	r30, 0x02	; 2
 8ca:	13 82       	std	Z+3, r1	; 0x03
 8cc:	12 82       	std	Z+2, r1	; 0x02
 8ce:	a0 91 38 01 	lds	r26, 0x0138	; 0x800138 <__flp>
 8d2:	b0 91 39 01 	lds	r27, 0x0139	; 0x800139 <__flp+0x1>
 8d6:	10 97       	sbiw	r26, 0x00	; 0
 8d8:	81 f4       	brne	.+32     	; 0x8fa <free+0x3e>
 8da:	20 81       	ld	r18, Z
 8dc:	31 81       	ldd	r19, Z+1	; 0x01
 8de:	82 0f       	add	r24, r18
 8e0:	93 1f       	adc	r25, r19
 8e2:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__brkval>
 8e6:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__brkval+0x1>
 8ea:	28 17       	cp	r18, r24
 8ec:	39 07       	cpc	r19, r25
 8ee:	51 f5       	brne	.+84     	; 0x944 <__stack+0x45>
 8f0:	f0 93 37 01 	sts	0x0137, r31	; 0x800137 <__brkval+0x1>
 8f4:	e0 93 36 01 	sts	0x0136, r30	; 0x800136 <__brkval>
 8f8:	67 c0       	rjmp	.+206    	; 0x9c8 <__stack+0xc9>
 8fa:	ed 01       	movw	r28, r26
 8fc:	20 e0       	ldi	r18, 0x00	; 0
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	ce 17       	cp	r28, r30
 902:	df 07       	cpc	r29, r31
 904:	40 f4       	brcc	.+16     	; 0x916 <__stack+0x17>
 906:	4a 81       	ldd	r20, Y+2	; 0x02
 908:	5b 81       	ldd	r21, Y+3	; 0x03
 90a:	9e 01       	movw	r18, r28
 90c:	41 15       	cp	r20, r1
 90e:	51 05       	cpc	r21, r1
 910:	f1 f0       	breq	.+60     	; 0x94e <__stack+0x4f>
 912:	ea 01       	movw	r28, r20
 914:	f5 cf       	rjmp	.-22     	; 0x900 <__stack+0x1>
 916:	d3 83       	std	Z+3, r29	; 0x03
 918:	c2 83       	std	Z+2, r28	; 0x02
 91a:	40 81       	ld	r20, Z
 91c:	51 81       	ldd	r21, Z+1	; 0x01
 91e:	84 0f       	add	r24, r20
 920:	95 1f       	adc	r25, r21
 922:	c8 17       	cp	r28, r24
 924:	d9 07       	cpc	r29, r25
 926:	59 f4       	brne	.+22     	; 0x93e <__stack+0x3f>
 928:	88 81       	ld	r24, Y
 92a:	99 81       	ldd	r25, Y+1	; 0x01
 92c:	84 0f       	add	r24, r20
 92e:	95 1f       	adc	r25, r21
 930:	02 96       	adiw	r24, 0x02	; 2
 932:	91 83       	std	Z+1, r25	; 0x01
 934:	80 83       	st	Z, r24
 936:	8a 81       	ldd	r24, Y+2	; 0x02
 938:	9b 81       	ldd	r25, Y+3	; 0x03
 93a:	93 83       	std	Z+3, r25	; 0x03
 93c:	82 83       	std	Z+2, r24	; 0x02
 93e:	21 15       	cp	r18, r1
 940:	31 05       	cpc	r19, r1
 942:	29 f4       	brne	.+10     	; 0x94e <__stack+0x4f>
 944:	f0 93 39 01 	sts	0x0139, r31	; 0x800139 <__flp+0x1>
 948:	e0 93 38 01 	sts	0x0138, r30	; 0x800138 <__flp>
 94c:	3d c0       	rjmp	.+122    	; 0x9c8 <__stack+0xc9>
 94e:	e9 01       	movw	r28, r18
 950:	fb 83       	std	Y+3, r31	; 0x03
 952:	ea 83       	std	Y+2, r30	; 0x02
 954:	49 91       	ld	r20, Y+
 956:	59 91       	ld	r21, Y+
 958:	c4 0f       	add	r28, r20
 95a:	d5 1f       	adc	r29, r21
 95c:	ec 17       	cp	r30, r28
 95e:	fd 07       	cpc	r31, r29
 960:	61 f4       	brne	.+24     	; 0x97a <__stack+0x7b>
 962:	80 81       	ld	r24, Z
 964:	91 81       	ldd	r25, Z+1	; 0x01
 966:	84 0f       	add	r24, r20
 968:	95 1f       	adc	r25, r21
 96a:	02 96       	adiw	r24, 0x02	; 2
 96c:	e9 01       	movw	r28, r18
 96e:	99 83       	std	Y+1, r25	; 0x01
 970:	88 83       	st	Y, r24
 972:	82 81       	ldd	r24, Z+2	; 0x02
 974:	93 81       	ldd	r25, Z+3	; 0x03
 976:	9b 83       	std	Y+3, r25	; 0x03
 978:	8a 83       	std	Y+2, r24	; 0x02
 97a:	e0 e0       	ldi	r30, 0x00	; 0
 97c:	f0 e0       	ldi	r31, 0x00	; 0
 97e:	12 96       	adiw	r26, 0x02	; 2
 980:	8d 91       	ld	r24, X+
 982:	9c 91       	ld	r25, X
 984:	13 97       	sbiw	r26, 0x03	; 3
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	19 f0       	breq	.+6      	; 0x990 <__stack+0x91>
 98a:	fd 01       	movw	r30, r26
 98c:	dc 01       	movw	r26, r24
 98e:	f7 cf       	rjmp	.-18     	; 0x97e <__stack+0x7f>
 990:	8d 91       	ld	r24, X+
 992:	9c 91       	ld	r25, X
 994:	11 97       	sbiw	r26, 0x01	; 1
 996:	9d 01       	movw	r18, r26
 998:	2e 5f       	subi	r18, 0xFE	; 254
 99a:	3f 4f       	sbci	r19, 0xFF	; 255
 99c:	82 0f       	add	r24, r18
 99e:	93 1f       	adc	r25, r19
 9a0:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <__brkval>
 9a4:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <__brkval+0x1>
 9a8:	28 17       	cp	r18, r24
 9aa:	39 07       	cpc	r19, r25
 9ac:	69 f4       	brne	.+26     	; 0x9c8 <__stack+0xc9>
 9ae:	30 97       	sbiw	r30, 0x00	; 0
 9b0:	29 f4       	brne	.+10     	; 0x9bc <__stack+0xbd>
 9b2:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <__flp+0x1>
 9b6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <__flp>
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0xc1>
 9bc:	13 82       	std	Z+3, r1	; 0x03
 9be:	12 82       	std	Z+2, r1	; 0x02
 9c0:	b0 93 37 01 	sts	0x0137, r27	; 0x800137 <__brkval+0x1>
 9c4:	a0 93 36 01 	sts	0x0136, r26	; 0x800136 <__brkval>
 9c8:	df 91       	pop	r29
 9ca:	cf 91       	pop	r28
 9cc:	08 95       	ret

000009ce <snprintf>:
 9ce:	ae e0       	ldi	r26, 0x0E	; 14
 9d0:	b0 e0       	ldi	r27, 0x00	; 0
 9d2:	ed ee       	ldi	r30, 0xED	; 237
 9d4:	f4 e0       	ldi	r31, 0x04	; 4
 9d6:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__prologue_saves__+0x1c>
 9da:	0d 89       	ldd	r16, Y+21	; 0x15
 9dc:	1e 89       	ldd	r17, Y+22	; 0x16
 9de:	8f 89       	ldd	r24, Y+23	; 0x17
 9e0:	98 8d       	ldd	r25, Y+24	; 0x18
 9e2:	26 e0       	ldi	r18, 0x06	; 6
 9e4:	2c 83       	std	Y+4, r18	; 0x04
 9e6:	1a 83       	std	Y+2, r17	; 0x02
 9e8:	09 83       	std	Y+1, r16	; 0x01
 9ea:	97 ff       	sbrs	r25, 7
 9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <snprintf+0x24>
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	90 e8       	ldi	r25, 0x80	; 128
 9f2:	01 97       	sbiw	r24, 0x01	; 1
 9f4:	9e 83       	std	Y+6, r25	; 0x06
 9f6:	8d 83       	std	Y+5, r24	; 0x05
 9f8:	ae 01       	movw	r20, r28
 9fa:	45 5e       	subi	r20, 0xE5	; 229
 9fc:	5f 4f       	sbci	r21, 0xFF	; 255
 9fe:	69 8d       	ldd	r22, Y+25	; 0x19
 a00:	7a 8d       	ldd	r23, Y+26	; 0x1a
 a02:	ce 01       	movw	r24, r28
 a04:	01 96       	adiw	r24, 0x01	; 1
 a06:	0e 94 17 05 	call	0xa2e	; 0xa2e <vfprintf>
 a0a:	4d 81       	ldd	r20, Y+5	; 0x05
 a0c:	5e 81       	ldd	r21, Y+6	; 0x06
 a0e:	57 fd       	sbrc	r21, 7
 a10:	0a c0       	rjmp	.+20     	; 0xa26 <snprintf+0x58>
 a12:	2f 81       	ldd	r18, Y+7	; 0x07
 a14:	38 85       	ldd	r19, Y+8	; 0x08
 a16:	42 17       	cp	r20, r18
 a18:	53 07       	cpc	r21, r19
 a1a:	0c f4       	brge	.+2      	; 0xa1e <snprintf+0x50>
 a1c:	9a 01       	movw	r18, r20
 a1e:	f8 01       	movw	r30, r16
 a20:	e2 0f       	add	r30, r18
 a22:	f3 1f       	adc	r31, r19
 a24:	10 82       	st	Z, r1
 a26:	2e 96       	adiw	r28, 0x0e	; 14
 a28:	e4 e0       	ldi	r30, 0x04	; 4
 a2a:	0c 94 d2 07 	jmp	0xfa4	; 0xfa4 <__epilogue_restores__+0x1c>

00000a2e <vfprintf>:
 a2e:	ab e0       	ldi	r26, 0x0B	; 11
 a30:	b0 e0       	ldi	r27, 0x00	; 0
 a32:	ed e1       	ldi	r30, 0x1D	; 29
 a34:	f5 e0       	ldi	r31, 0x05	; 5
 a36:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <__prologue_saves__>
 a3a:	6c 01       	movw	r12, r24
 a3c:	7b 01       	movw	r14, r22
 a3e:	8a 01       	movw	r16, r20
 a40:	fc 01       	movw	r30, r24
 a42:	17 82       	std	Z+7, r1	; 0x07
 a44:	16 82       	std	Z+6, r1	; 0x06
 a46:	83 81       	ldd	r24, Z+3	; 0x03
 a48:	81 ff       	sbrs	r24, 1
 a4a:	cc c1       	rjmp	.+920    	; 0xde4 <vfprintf+0x3b6>
 a4c:	ce 01       	movw	r24, r28
 a4e:	01 96       	adiw	r24, 0x01	; 1
 a50:	3c 01       	movw	r6, r24
 a52:	f6 01       	movw	r30, r12
 a54:	93 81       	ldd	r25, Z+3	; 0x03
 a56:	f7 01       	movw	r30, r14
 a58:	93 fd       	sbrc	r25, 3
 a5a:	85 91       	lpm	r24, Z+
 a5c:	93 ff       	sbrs	r25, 3
 a5e:	81 91       	ld	r24, Z+
 a60:	7f 01       	movw	r14, r30
 a62:	88 23       	and	r24, r24
 a64:	09 f4       	brne	.+2      	; 0xa68 <vfprintf+0x3a>
 a66:	ba c1       	rjmp	.+884    	; 0xddc <vfprintf+0x3ae>
 a68:	85 32       	cpi	r24, 0x25	; 37
 a6a:	39 f4       	brne	.+14     	; 0xa7a <vfprintf+0x4c>
 a6c:	93 fd       	sbrc	r25, 3
 a6e:	85 91       	lpm	r24, Z+
 a70:	93 ff       	sbrs	r25, 3
 a72:	81 91       	ld	r24, Z+
 a74:	7f 01       	movw	r14, r30
 a76:	85 32       	cpi	r24, 0x25	; 37
 a78:	29 f4       	brne	.+10     	; 0xa84 <vfprintf+0x56>
 a7a:	b6 01       	movw	r22, r12
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <fputc>
 a82:	e7 cf       	rjmp	.-50     	; 0xa52 <vfprintf+0x24>
 a84:	91 2c       	mov	r9, r1
 a86:	21 2c       	mov	r2, r1
 a88:	31 2c       	mov	r3, r1
 a8a:	ff e1       	ldi	r31, 0x1F	; 31
 a8c:	f3 15       	cp	r31, r3
 a8e:	d8 f0       	brcs	.+54     	; 0xac6 <vfprintf+0x98>
 a90:	8b 32       	cpi	r24, 0x2B	; 43
 a92:	79 f0       	breq	.+30     	; 0xab2 <vfprintf+0x84>
 a94:	38 f4       	brcc	.+14     	; 0xaa4 <vfprintf+0x76>
 a96:	80 32       	cpi	r24, 0x20	; 32
 a98:	79 f0       	breq	.+30     	; 0xab8 <vfprintf+0x8a>
 a9a:	83 32       	cpi	r24, 0x23	; 35
 a9c:	a1 f4       	brne	.+40     	; 0xac6 <vfprintf+0x98>
 a9e:	23 2d       	mov	r18, r3
 aa0:	20 61       	ori	r18, 0x10	; 16
 aa2:	1d c0       	rjmp	.+58     	; 0xade <vfprintf+0xb0>
 aa4:	8d 32       	cpi	r24, 0x2D	; 45
 aa6:	61 f0       	breq	.+24     	; 0xac0 <vfprintf+0x92>
 aa8:	80 33       	cpi	r24, 0x30	; 48
 aaa:	69 f4       	brne	.+26     	; 0xac6 <vfprintf+0x98>
 aac:	23 2d       	mov	r18, r3
 aae:	21 60       	ori	r18, 0x01	; 1
 ab0:	16 c0       	rjmp	.+44     	; 0xade <vfprintf+0xb0>
 ab2:	83 2d       	mov	r24, r3
 ab4:	82 60       	ori	r24, 0x02	; 2
 ab6:	38 2e       	mov	r3, r24
 ab8:	e3 2d       	mov	r30, r3
 aba:	e4 60       	ori	r30, 0x04	; 4
 abc:	3e 2e       	mov	r3, r30
 abe:	2a c0       	rjmp	.+84     	; 0xb14 <vfprintf+0xe6>
 ac0:	f3 2d       	mov	r31, r3
 ac2:	f8 60       	ori	r31, 0x08	; 8
 ac4:	1d c0       	rjmp	.+58     	; 0xb00 <vfprintf+0xd2>
 ac6:	37 fc       	sbrc	r3, 7
 ac8:	2d c0       	rjmp	.+90     	; 0xb24 <vfprintf+0xf6>
 aca:	20 ed       	ldi	r18, 0xD0	; 208
 acc:	28 0f       	add	r18, r24
 ace:	2a 30       	cpi	r18, 0x0A	; 10
 ad0:	40 f0       	brcs	.+16     	; 0xae2 <vfprintf+0xb4>
 ad2:	8e 32       	cpi	r24, 0x2E	; 46
 ad4:	b9 f4       	brne	.+46     	; 0xb04 <vfprintf+0xd6>
 ad6:	36 fc       	sbrc	r3, 6
 ad8:	81 c1       	rjmp	.+770    	; 0xddc <vfprintf+0x3ae>
 ada:	23 2d       	mov	r18, r3
 adc:	20 64       	ori	r18, 0x40	; 64
 ade:	32 2e       	mov	r3, r18
 ae0:	19 c0       	rjmp	.+50     	; 0xb14 <vfprintf+0xe6>
 ae2:	36 fe       	sbrs	r3, 6
 ae4:	06 c0       	rjmp	.+12     	; 0xaf2 <vfprintf+0xc4>
 ae6:	8a e0       	ldi	r24, 0x0A	; 10
 ae8:	98 9e       	mul	r9, r24
 aea:	20 0d       	add	r18, r0
 aec:	11 24       	eor	r1, r1
 aee:	92 2e       	mov	r9, r18
 af0:	11 c0       	rjmp	.+34     	; 0xb14 <vfprintf+0xe6>
 af2:	ea e0       	ldi	r30, 0x0A	; 10
 af4:	2e 9e       	mul	r2, r30
 af6:	20 0d       	add	r18, r0
 af8:	11 24       	eor	r1, r1
 afa:	22 2e       	mov	r2, r18
 afc:	f3 2d       	mov	r31, r3
 afe:	f0 62       	ori	r31, 0x20	; 32
 b00:	3f 2e       	mov	r3, r31
 b02:	08 c0       	rjmp	.+16     	; 0xb14 <vfprintf+0xe6>
 b04:	8c 36       	cpi	r24, 0x6C	; 108
 b06:	21 f4       	brne	.+8      	; 0xb10 <vfprintf+0xe2>
 b08:	83 2d       	mov	r24, r3
 b0a:	80 68       	ori	r24, 0x80	; 128
 b0c:	38 2e       	mov	r3, r24
 b0e:	02 c0       	rjmp	.+4      	; 0xb14 <vfprintf+0xe6>
 b10:	88 36       	cpi	r24, 0x68	; 104
 b12:	41 f4       	brne	.+16     	; 0xb24 <vfprintf+0xf6>
 b14:	f7 01       	movw	r30, r14
 b16:	93 fd       	sbrc	r25, 3
 b18:	85 91       	lpm	r24, Z+
 b1a:	93 ff       	sbrs	r25, 3
 b1c:	81 91       	ld	r24, Z+
 b1e:	7f 01       	movw	r14, r30
 b20:	81 11       	cpse	r24, r1
 b22:	b3 cf       	rjmp	.-154    	; 0xa8a <vfprintf+0x5c>
 b24:	98 2f       	mov	r25, r24
 b26:	9f 7d       	andi	r25, 0xDF	; 223
 b28:	95 54       	subi	r25, 0x45	; 69
 b2a:	93 30       	cpi	r25, 0x03	; 3
 b2c:	28 f4       	brcc	.+10     	; 0xb38 <vfprintf+0x10a>
 b2e:	0c 5f       	subi	r16, 0xFC	; 252
 b30:	1f 4f       	sbci	r17, 0xFF	; 255
 b32:	9f e3       	ldi	r25, 0x3F	; 63
 b34:	99 83       	std	Y+1, r25	; 0x01
 b36:	0d c0       	rjmp	.+26     	; 0xb52 <vfprintf+0x124>
 b38:	83 36       	cpi	r24, 0x63	; 99
 b3a:	31 f0       	breq	.+12     	; 0xb48 <vfprintf+0x11a>
 b3c:	83 37       	cpi	r24, 0x73	; 115
 b3e:	71 f0       	breq	.+28     	; 0xb5c <vfprintf+0x12e>
 b40:	83 35       	cpi	r24, 0x53	; 83
 b42:	09 f0       	breq	.+2      	; 0xb46 <vfprintf+0x118>
 b44:	59 c0       	rjmp	.+178    	; 0xbf8 <vfprintf+0x1ca>
 b46:	21 c0       	rjmp	.+66     	; 0xb8a <vfprintf+0x15c>
 b48:	f8 01       	movw	r30, r16
 b4a:	80 81       	ld	r24, Z
 b4c:	89 83       	std	Y+1, r24	; 0x01
 b4e:	0e 5f       	subi	r16, 0xFE	; 254
 b50:	1f 4f       	sbci	r17, 0xFF	; 255
 b52:	88 24       	eor	r8, r8
 b54:	83 94       	inc	r8
 b56:	91 2c       	mov	r9, r1
 b58:	53 01       	movw	r10, r6
 b5a:	13 c0       	rjmp	.+38     	; 0xb82 <vfprintf+0x154>
 b5c:	28 01       	movw	r4, r16
 b5e:	f2 e0       	ldi	r31, 0x02	; 2
 b60:	4f 0e       	add	r4, r31
 b62:	51 1c       	adc	r5, r1
 b64:	f8 01       	movw	r30, r16
 b66:	a0 80       	ld	r10, Z
 b68:	b1 80       	ldd	r11, Z+1	; 0x01
 b6a:	36 fe       	sbrs	r3, 6
 b6c:	03 c0       	rjmp	.+6      	; 0xb74 <vfprintf+0x146>
 b6e:	69 2d       	mov	r22, r9
 b70:	70 e0       	ldi	r23, 0x00	; 0
 b72:	02 c0       	rjmp	.+4      	; 0xb78 <vfprintf+0x14a>
 b74:	6f ef       	ldi	r22, 0xFF	; 255
 b76:	7f ef       	ldi	r23, 0xFF	; 255
 b78:	c5 01       	movw	r24, r10
 b7a:	0e 94 03 07 	call	0xe06	; 0xe06 <strnlen>
 b7e:	4c 01       	movw	r8, r24
 b80:	82 01       	movw	r16, r4
 b82:	f3 2d       	mov	r31, r3
 b84:	ff 77       	andi	r31, 0x7F	; 127
 b86:	3f 2e       	mov	r3, r31
 b88:	16 c0       	rjmp	.+44     	; 0xbb6 <vfprintf+0x188>
 b8a:	28 01       	movw	r4, r16
 b8c:	22 e0       	ldi	r18, 0x02	; 2
 b8e:	42 0e       	add	r4, r18
 b90:	51 1c       	adc	r5, r1
 b92:	f8 01       	movw	r30, r16
 b94:	a0 80       	ld	r10, Z
 b96:	b1 80       	ldd	r11, Z+1	; 0x01
 b98:	36 fe       	sbrs	r3, 6
 b9a:	03 c0       	rjmp	.+6      	; 0xba2 <vfprintf+0x174>
 b9c:	69 2d       	mov	r22, r9
 b9e:	70 e0       	ldi	r23, 0x00	; 0
 ba0:	02 c0       	rjmp	.+4      	; 0xba6 <vfprintf+0x178>
 ba2:	6f ef       	ldi	r22, 0xFF	; 255
 ba4:	7f ef       	ldi	r23, 0xFF	; 255
 ba6:	c5 01       	movw	r24, r10
 ba8:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <strnlen_P>
 bac:	4c 01       	movw	r8, r24
 bae:	f3 2d       	mov	r31, r3
 bb0:	f0 68       	ori	r31, 0x80	; 128
 bb2:	3f 2e       	mov	r3, r31
 bb4:	82 01       	movw	r16, r4
 bb6:	33 fc       	sbrc	r3, 3
 bb8:	1b c0       	rjmp	.+54     	; 0xbf0 <vfprintf+0x1c2>
 bba:	82 2d       	mov	r24, r2
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	88 16       	cp	r8, r24
 bc0:	99 06       	cpc	r9, r25
 bc2:	b0 f4       	brcc	.+44     	; 0xbf0 <vfprintf+0x1c2>
 bc4:	b6 01       	movw	r22, r12
 bc6:	80 e2       	ldi	r24, 0x20	; 32
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	0e 94 0e 07 	call	0xe1c	; 0xe1c <fputc>
 bce:	2a 94       	dec	r2
 bd0:	f4 cf       	rjmp	.-24     	; 0xbba <vfprintf+0x18c>
 bd2:	f5 01       	movw	r30, r10
 bd4:	37 fc       	sbrc	r3, 7
 bd6:	85 91       	lpm	r24, Z+
 bd8:	37 fe       	sbrs	r3, 7
 bda:	81 91       	ld	r24, Z+
 bdc:	5f 01       	movw	r10, r30
 bde:	b6 01       	movw	r22, r12
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	0e 94 0e 07 	call	0xe1c	; 0xe1c <fputc>
 be6:	21 10       	cpse	r2, r1
 be8:	2a 94       	dec	r2
 bea:	21 e0       	ldi	r18, 0x01	; 1
 bec:	82 1a       	sub	r8, r18
 bee:	91 08       	sbc	r9, r1
 bf0:	81 14       	cp	r8, r1
 bf2:	91 04       	cpc	r9, r1
 bf4:	71 f7       	brne	.-36     	; 0xbd2 <vfprintf+0x1a4>
 bf6:	e8 c0       	rjmp	.+464    	; 0xdc8 <vfprintf+0x39a>
 bf8:	84 36       	cpi	r24, 0x64	; 100
 bfa:	11 f0       	breq	.+4      	; 0xc00 <vfprintf+0x1d2>
 bfc:	89 36       	cpi	r24, 0x69	; 105
 bfe:	41 f5       	brne	.+80     	; 0xc50 <vfprintf+0x222>
 c00:	f8 01       	movw	r30, r16
 c02:	37 fe       	sbrs	r3, 7
 c04:	07 c0       	rjmp	.+14     	; 0xc14 <vfprintf+0x1e6>
 c06:	60 81       	ld	r22, Z
 c08:	71 81       	ldd	r23, Z+1	; 0x01
 c0a:	82 81       	ldd	r24, Z+2	; 0x02
 c0c:	93 81       	ldd	r25, Z+3	; 0x03
 c0e:	0c 5f       	subi	r16, 0xFC	; 252
 c10:	1f 4f       	sbci	r17, 0xFF	; 255
 c12:	08 c0       	rjmp	.+16     	; 0xc24 <vfprintf+0x1f6>
 c14:	60 81       	ld	r22, Z
 c16:	71 81       	ldd	r23, Z+1	; 0x01
 c18:	07 2e       	mov	r0, r23
 c1a:	00 0c       	add	r0, r0
 c1c:	88 0b       	sbc	r24, r24
 c1e:	99 0b       	sbc	r25, r25
 c20:	0e 5f       	subi	r16, 0xFE	; 254
 c22:	1f 4f       	sbci	r17, 0xFF	; 255
 c24:	f3 2d       	mov	r31, r3
 c26:	ff 76       	andi	r31, 0x6F	; 111
 c28:	3f 2e       	mov	r3, r31
 c2a:	97 ff       	sbrs	r25, 7
 c2c:	09 c0       	rjmp	.+18     	; 0xc40 <vfprintf+0x212>
 c2e:	90 95       	com	r25
 c30:	80 95       	com	r24
 c32:	70 95       	com	r23
 c34:	61 95       	neg	r22
 c36:	7f 4f       	sbci	r23, 0xFF	; 255
 c38:	8f 4f       	sbci	r24, 0xFF	; 255
 c3a:	9f 4f       	sbci	r25, 0xFF	; 255
 c3c:	f0 68       	ori	r31, 0x80	; 128
 c3e:	3f 2e       	mov	r3, r31
 c40:	2a e0       	ldi	r18, 0x0A	; 10
 c42:	30 e0       	ldi	r19, 0x00	; 0
 c44:	a3 01       	movw	r20, r6
 c46:	0e 94 4a 07 	call	0xe94	; 0xe94 <__ultoa_invert>
 c4a:	88 2e       	mov	r8, r24
 c4c:	86 18       	sub	r8, r6
 c4e:	45 c0       	rjmp	.+138    	; 0xcda <vfprintf+0x2ac>
 c50:	85 37       	cpi	r24, 0x75	; 117
 c52:	31 f4       	brne	.+12     	; 0xc60 <vfprintf+0x232>
 c54:	23 2d       	mov	r18, r3
 c56:	2f 7e       	andi	r18, 0xEF	; 239
 c58:	b2 2e       	mov	r11, r18
 c5a:	2a e0       	ldi	r18, 0x0A	; 10
 c5c:	30 e0       	ldi	r19, 0x00	; 0
 c5e:	25 c0       	rjmp	.+74     	; 0xcaa <vfprintf+0x27c>
 c60:	93 2d       	mov	r25, r3
 c62:	99 7f       	andi	r25, 0xF9	; 249
 c64:	b9 2e       	mov	r11, r25
 c66:	8f 36       	cpi	r24, 0x6F	; 111
 c68:	c1 f0       	breq	.+48     	; 0xc9a <vfprintf+0x26c>
 c6a:	18 f4       	brcc	.+6      	; 0xc72 <vfprintf+0x244>
 c6c:	88 35       	cpi	r24, 0x58	; 88
 c6e:	79 f0       	breq	.+30     	; 0xc8e <vfprintf+0x260>
 c70:	b5 c0       	rjmp	.+362    	; 0xddc <vfprintf+0x3ae>
 c72:	80 37       	cpi	r24, 0x70	; 112
 c74:	19 f0       	breq	.+6      	; 0xc7c <vfprintf+0x24e>
 c76:	88 37       	cpi	r24, 0x78	; 120
 c78:	21 f0       	breq	.+8      	; 0xc82 <vfprintf+0x254>
 c7a:	b0 c0       	rjmp	.+352    	; 0xddc <vfprintf+0x3ae>
 c7c:	e9 2f       	mov	r30, r25
 c7e:	e0 61       	ori	r30, 0x10	; 16
 c80:	be 2e       	mov	r11, r30
 c82:	b4 fe       	sbrs	r11, 4
 c84:	0d c0       	rjmp	.+26     	; 0xca0 <vfprintf+0x272>
 c86:	fb 2d       	mov	r31, r11
 c88:	f4 60       	ori	r31, 0x04	; 4
 c8a:	bf 2e       	mov	r11, r31
 c8c:	09 c0       	rjmp	.+18     	; 0xca0 <vfprintf+0x272>
 c8e:	34 fe       	sbrs	r3, 4
 c90:	0a c0       	rjmp	.+20     	; 0xca6 <vfprintf+0x278>
 c92:	29 2f       	mov	r18, r25
 c94:	26 60       	ori	r18, 0x06	; 6
 c96:	b2 2e       	mov	r11, r18
 c98:	06 c0       	rjmp	.+12     	; 0xca6 <vfprintf+0x278>
 c9a:	28 e0       	ldi	r18, 0x08	; 8
 c9c:	30 e0       	ldi	r19, 0x00	; 0
 c9e:	05 c0       	rjmp	.+10     	; 0xcaa <vfprintf+0x27c>
 ca0:	20 e1       	ldi	r18, 0x10	; 16
 ca2:	30 e0       	ldi	r19, 0x00	; 0
 ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0x27c>
 ca6:	20 e1       	ldi	r18, 0x10	; 16
 ca8:	32 e0       	ldi	r19, 0x02	; 2
 caa:	f8 01       	movw	r30, r16
 cac:	b7 fe       	sbrs	r11, 7
 cae:	07 c0       	rjmp	.+14     	; 0xcbe <vfprintf+0x290>
 cb0:	60 81       	ld	r22, Z
 cb2:	71 81       	ldd	r23, Z+1	; 0x01
 cb4:	82 81       	ldd	r24, Z+2	; 0x02
 cb6:	93 81       	ldd	r25, Z+3	; 0x03
 cb8:	0c 5f       	subi	r16, 0xFC	; 252
 cba:	1f 4f       	sbci	r17, 0xFF	; 255
 cbc:	06 c0       	rjmp	.+12     	; 0xcca <vfprintf+0x29c>
 cbe:	60 81       	ld	r22, Z
 cc0:	71 81       	ldd	r23, Z+1	; 0x01
 cc2:	80 e0       	ldi	r24, 0x00	; 0
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	0e 5f       	subi	r16, 0xFE	; 254
 cc8:	1f 4f       	sbci	r17, 0xFF	; 255
 cca:	a3 01       	movw	r20, r6
 ccc:	0e 94 4a 07 	call	0xe94	; 0xe94 <__ultoa_invert>
 cd0:	88 2e       	mov	r8, r24
 cd2:	86 18       	sub	r8, r6
 cd4:	fb 2d       	mov	r31, r11
 cd6:	ff 77       	andi	r31, 0x7F	; 127
 cd8:	3f 2e       	mov	r3, r31
 cda:	36 fe       	sbrs	r3, 6
 cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <vfprintf+0x2ca>
 cde:	23 2d       	mov	r18, r3
 ce0:	2e 7f       	andi	r18, 0xFE	; 254
 ce2:	a2 2e       	mov	r10, r18
 ce4:	89 14       	cp	r8, r9
 ce6:	58 f4       	brcc	.+22     	; 0xcfe <vfprintf+0x2d0>
 ce8:	34 fe       	sbrs	r3, 4
 cea:	0b c0       	rjmp	.+22     	; 0xd02 <vfprintf+0x2d4>
 cec:	32 fc       	sbrc	r3, 2
 cee:	09 c0       	rjmp	.+18     	; 0xd02 <vfprintf+0x2d4>
 cf0:	83 2d       	mov	r24, r3
 cf2:	8e 7e       	andi	r24, 0xEE	; 238
 cf4:	a8 2e       	mov	r10, r24
 cf6:	05 c0       	rjmp	.+10     	; 0xd02 <vfprintf+0x2d4>
 cf8:	b8 2c       	mov	r11, r8
 cfa:	a3 2c       	mov	r10, r3
 cfc:	03 c0       	rjmp	.+6      	; 0xd04 <vfprintf+0x2d6>
 cfe:	b8 2c       	mov	r11, r8
 d00:	01 c0       	rjmp	.+2      	; 0xd04 <vfprintf+0x2d6>
 d02:	b9 2c       	mov	r11, r9
 d04:	a4 fe       	sbrs	r10, 4
 d06:	0f c0       	rjmp	.+30     	; 0xd26 <vfprintf+0x2f8>
 d08:	fe 01       	movw	r30, r28
 d0a:	e8 0d       	add	r30, r8
 d0c:	f1 1d       	adc	r31, r1
 d0e:	80 81       	ld	r24, Z
 d10:	80 33       	cpi	r24, 0x30	; 48
 d12:	21 f4       	brne	.+8      	; 0xd1c <vfprintf+0x2ee>
 d14:	9a 2d       	mov	r25, r10
 d16:	99 7e       	andi	r25, 0xE9	; 233
 d18:	a9 2e       	mov	r10, r25
 d1a:	09 c0       	rjmp	.+18     	; 0xd2e <vfprintf+0x300>
 d1c:	a2 fe       	sbrs	r10, 2
 d1e:	06 c0       	rjmp	.+12     	; 0xd2c <vfprintf+0x2fe>
 d20:	b3 94       	inc	r11
 d22:	b3 94       	inc	r11
 d24:	04 c0       	rjmp	.+8      	; 0xd2e <vfprintf+0x300>
 d26:	8a 2d       	mov	r24, r10
 d28:	86 78       	andi	r24, 0x86	; 134
 d2a:	09 f0       	breq	.+2      	; 0xd2e <vfprintf+0x300>
 d2c:	b3 94       	inc	r11
 d2e:	a3 fc       	sbrc	r10, 3
 d30:	11 c0       	rjmp	.+34     	; 0xd54 <vfprintf+0x326>
 d32:	a0 fe       	sbrs	r10, 0
 d34:	06 c0       	rjmp	.+12     	; 0xd42 <vfprintf+0x314>
 d36:	b2 14       	cp	r11, r2
 d38:	88 f4       	brcc	.+34     	; 0xd5c <vfprintf+0x32e>
 d3a:	28 0c       	add	r2, r8
 d3c:	92 2c       	mov	r9, r2
 d3e:	9b 18       	sub	r9, r11
 d40:	0e c0       	rjmp	.+28     	; 0xd5e <vfprintf+0x330>
 d42:	b2 14       	cp	r11, r2
 d44:	60 f4       	brcc	.+24     	; 0xd5e <vfprintf+0x330>
 d46:	b6 01       	movw	r22, r12
 d48:	80 e2       	ldi	r24, 0x20	; 32
 d4a:	90 e0       	ldi	r25, 0x00	; 0
 d4c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <fputc>
 d50:	b3 94       	inc	r11
 d52:	f7 cf       	rjmp	.-18     	; 0xd42 <vfprintf+0x314>
 d54:	b2 14       	cp	r11, r2
 d56:	18 f4       	brcc	.+6      	; 0xd5e <vfprintf+0x330>
 d58:	2b 18       	sub	r2, r11
 d5a:	02 c0       	rjmp	.+4      	; 0xd60 <vfprintf+0x332>
 d5c:	98 2c       	mov	r9, r8
 d5e:	21 2c       	mov	r2, r1
 d60:	a4 fe       	sbrs	r10, 4
 d62:	10 c0       	rjmp	.+32     	; 0xd84 <vfprintf+0x356>
 d64:	b6 01       	movw	r22, r12
 d66:	80 e3       	ldi	r24, 0x30	; 48
 d68:	90 e0       	ldi	r25, 0x00	; 0
 d6a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <fputc>
 d6e:	a2 fe       	sbrs	r10, 2
 d70:	17 c0       	rjmp	.+46     	; 0xda0 <vfprintf+0x372>
 d72:	a1 fc       	sbrc	r10, 1
 d74:	03 c0       	rjmp	.+6      	; 0xd7c <vfprintf+0x34e>
 d76:	88 e7       	ldi	r24, 0x78	; 120
 d78:	90 e0       	ldi	r25, 0x00	; 0
 d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0x352>
 d7c:	88 e5       	ldi	r24, 0x58	; 88
 d7e:	90 e0       	ldi	r25, 0x00	; 0
 d80:	b6 01       	movw	r22, r12
 d82:	0c c0       	rjmp	.+24     	; 0xd9c <vfprintf+0x36e>
 d84:	8a 2d       	mov	r24, r10
 d86:	86 78       	andi	r24, 0x86	; 134
 d88:	59 f0       	breq	.+22     	; 0xda0 <vfprintf+0x372>
 d8a:	a1 fe       	sbrs	r10, 1
 d8c:	02 c0       	rjmp	.+4      	; 0xd92 <vfprintf+0x364>
 d8e:	8b e2       	ldi	r24, 0x2B	; 43
 d90:	01 c0       	rjmp	.+2      	; 0xd94 <vfprintf+0x366>
 d92:	80 e2       	ldi	r24, 0x20	; 32
 d94:	a7 fc       	sbrc	r10, 7
 d96:	8d e2       	ldi	r24, 0x2D	; 45
 d98:	b6 01       	movw	r22, r12
 d9a:	90 e0       	ldi	r25, 0x00	; 0
 d9c:	0e 94 0e 07 	call	0xe1c	; 0xe1c <fputc>
 da0:	89 14       	cp	r8, r9
 da2:	38 f4       	brcc	.+14     	; 0xdb2 <vfprintf+0x384>
 da4:	b6 01       	movw	r22, r12
 da6:	80 e3       	ldi	r24, 0x30	; 48
 da8:	90 e0       	ldi	r25, 0x00	; 0
 daa:	0e 94 0e 07 	call	0xe1c	; 0xe1c <fputc>
 dae:	9a 94       	dec	r9
 db0:	f7 cf       	rjmp	.-18     	; 0xda0 <vfprintf+0x372>
 db2:	8a 94       	dec	r8
 db4:	f3 01       	movw	r30, r6
 db6:	e8 0d       	add	r30, r8
 db8:	f1 1d       	adc	r31, r1
 dba:	80 81       	ld	r24, Z
 dbc:	b6 01       	movw	r22, r12
 dbe:	90 e0       	ldi	r25, 0x00	; 0
 dc0:	0e 94 0e 07 	call	0xe1c	; 0xe1c <fputc>
 dc4:	81 10       	cpse	r8, r1
 dc6:	f5 cf       	rjmp	.-22     	; 0xdb2 <vfprintf+0x384>
 dc8:	22 20       	and	r2, r2
 dca:	09 f4       	brne	.+2      	; 0xdce <vfprintf+0x3a0>
 dcc:	42 ce       	rjmp	.-892    	; 0xa52 <vfprintf+0x24>
 dce:	b6 01       	movw	r22, r12
 dd0:	80 e2       	ldi	r24, 0x20	; 32
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <fputc>
 dd8:	2a 94       	dec	r2
 dda:	f6 cf       	rjmp	.-20     	; 0xdc8 <vfprintf+0x39a>
 ddc:	f6 01       	movw	r30, r12
 dde:	86 81       	ldd	r24, Z+6	; 0x06
 de0:	97 81       	ldd	r25, Z+7	; 0x07
 de2:	02 c0       	rjmp	.+4      	; 0xde8 <vfprintf+0x3ba>
 de4:	8f ef       	ldi	r24, 0xFF	; 255
 de6:	9f ef       	ldi	r25, 0xFF	; 255
 de8:	2b 96       	adiw	r28, 0x0b	; 11
 dea:	e2 e1       	ldi	r30, 0x12	; 18
 dec:	0c 94 c4 07 	jmp	0xf88	; 0xf88 <__epilogue_restores__>

00000df0 <strnlen_P>:
 df0:	fc 01       	movw	r30, r24
 df2:	05 90       	lpm	r0, Z+
 df4:	61 50       	subi	r22, 0x01	; 1
 df6:	70 40       	sbci	r23, 0x00	; 0
 df8:	01 10       	cpse	r0, r1
 dfa:	d8 f7       	brcc	.-10     	; 0xdf2 <strnlen_P+0x2>
 dfc:	80 95       	com	r24
 dfe:	90 95       	com	r25
 e00:	8e 0f       	add	r24, r30
 e02:	9f 1f       	adc	r25, r31
 e04:	08 95       	ret

00000e06 <strnlen>:
 e06:	fc 01       	movw	r30, r24
 e08:	61 50       	subi	r22, 0x01	; 1
 e0a:	70 40       	sbci	r23, 0x00	; 0
 e0c:	01 90       	ld	r0, Z+
 e0e:	01 10       	cpse	r0, r1
 e10:	d8 f7       	brcc	.-10     	; 0xe08 <strnlen+0x2>
 e12:	80 95       	com	r24
 e14:	90 95       	com	r25
 e16:	8e 0f       	add	r24, r30
 e18:	9f 1f       	adc	r25, r31
 e1a:	08 95       	ret

00000e1c <fputc>:
 e1c:	0f 93       	push	r16
 e1e:	1f 93       	push	r17
 e20:	cf 93       	push	r28
 e22:	df 93       	push	r29
 e24:	fb 01       	movw	r30, r22
 e26:	23 81       	ldd	r18, Z+3	; 0x03
 e28:	21 fd       	sbrc	r18, 1
 e2a:	03 c0       	rjmp	.+6      	; 0xe32 <fputc+0x16>
 e2c:	8f ef       	ldi	r24, 0xFF	; 255
 e2e:	9f ef       	ldi	r25, 0xFF	; 255
 e30:	2c c0       	rjmp	.+88     	; 0xe8a <fputc+0x6e>
 e32:	22 ff       	sbrs	r18, 2
 e34:	16 c0       	rjmp	.+44     	; 0xe62 <fputc+0x46>
 e36:	46 81       	ldd	r20, Z+6	; 0x06
 e38:	57 81       	ldd	r21, Z+7	; 0x07
 e3a:	24 81       	ldd	r18, Z+4	; 0x04
 e3c:	35 81       	ldd	r19, Z+5	; 0x05
 e3e:	42 17       	cp	r20, r18
 e40:	53 07       	cpc	r21, r19
 e42:	44 f4       	brge	.+16     	; 0xe54 <fputc+0x38>
 e44:	a0 81       	ld	r26, Z
 e46:	b1 81       	ldd	r27, Z+1	; 0x01
 e48:	9d 01       	movw	r18, r26
 e4a:	2f 5f       	subi	r18, 0xFF	; 255
 e4c:	3f 4f       	sbci	r19, 0xFF	; 255
 e4e:	31 83       	std	Z+1, r19	; 0x01
 e50:	20 83       	st	Z, r18
 e52:	8c 93       	st	X, r24
 e54:	26 81       	ldd	r18, Z+6	; 0x06
 e56:	37 81       	ldd	r19, Z+7	; 0x07
 e58:	2f 5f       	subi	r18, 0xFF	; 255
 e5a:	3f 4f       	sbci	r19, 0xFF	; 255
 e5c:	37 83       	std	Z+7, r19	; 0x07
 e5e:	26 83       	std	Z+6, r18	; 0x06
 e60:	14 c0       	rjmp	.+40     	; 0xe8a <fputc+0x6e>
 e62:	8b 01       	movw	r16, r22
 e64:	ec 01       	movw	r28, r24
 e66:	fb 01       	movw	r30, r22
 e68:	00 84       	ldd	r0, Z+8	; 0x08
 e6a:	f1 85       	ldd	r31, Z+9	; 0x09
 e6c:	e0 2d       	mov	r30, r0
 e6e:	09 95       	icall
 e70:	89 2b       	or	r24, r25
 e72:	e1 f6       	brne	.-72     	; 0xe2c <fputc+0x10>
 e74:	d8 01       	movw	r26, r16
 e76:	16 96       	adiw	r26, 0x06	; 6
 e78:	8d 91       	ld	r24, X+
 e7a:	9c 91       	ld	r25, X
 e7c:	17 97       	sbiw	r26, 0x07	; 7
 e7e:	01 96       	adiw	r24, 0x01	; 1
 e80:	17 96       	adiw	r26, 0x07	; 7
 e82:	9c 93       	st	X, r25
 e84:	8e 93       	st	-X, r24
 e86:	16 97       	sbiw	r26, 0x06	; 6
 e88:	ce 01       	movw	r24, r28
 e8a:	df 91       	pop	r29
 e8c:	cf 91       	pop	r28
 e8e:	1f 91       	pop	r17
 e90:	0f 91       	pop	r16
 e92:	08 95       	ret

00000e94 <__ultoa_invert>:
 e94:	fa 01       	movw	r30, r20
 e96:	aa 27       	eor	r26, r26
 e98:	28 30       	cpi	r18, 0x08	; 8
 e9a:	51 f1       	breq	.+84     	; 0xef0 <__ultoa_invert+0x5c>
 e9c:	20 31       	cpi	r18, 0x10	; 16
 e9e:	81 f1       	breq	.+96     	; 0xf00 <__ultoa_invert+0x6c>
 ea0:	e8 94       	clt
 ea2:	6f 93       	push	r22
 ea4:	6e 7f       	andi	r22, 0xFE	; 254
 ea6:	6e 5f       	subi	r22, 0xFE	; 254
 ea8:	7f 4f       	sbci	r23, 0xFF	; 255
 eaa:	8f 4f       	sbci	r24, 0xFF	; 255
 eac:	9f 4f       	sbci	r25, 0xFF	; 255
 eae:	af 4f       	sbci	r26, 0xFF	; 255
 eb0:	b1 e0       	ldi	r27, 0x01	; 1
 eb2:	3e d0       	rcall	.+124    	; 0xf30 <__ultoa_invert+0x9c>
 eb4:	b4 e0       	ldi	r27, 0x04	; 4
 eb6:	3c d0       	rcall	.+120    	; 0xf30 <__ultoa_invert+0x9c>
 eb8:	67 0f       	add	r22, r23
 eba:	78 1f       	adc	r23, r24
 ebc:	89 1f       	adc	r24, r25
 ebe:	9a 1f       	adc	r25, r26
 ec0:	a1 1d       	adc	r26, r1
 ec2:	68 0f       	add	r22, r24
 ec4:	79 1f       	adc	r23, r25
 ec6:	8a 1f       	adc	r24, r26
 ec8:	91 1d       	adc	r25, r1
 eca:	a1 1d       	adc	r26, r1
 ecc:	6a 0f       	add	r22, r26
 ece:	71 1d       	adc	r23, r1
 ed0:	81 1d       	adc	r24, r1
 ed2:	91 1d       	adc	r25, r1
 ed4:	a1 1d       	adc	r26, r1
 ed6:	20 d0       	rcall	.+64     	; 0xf18 <__ultoa_invert+0x84>
 ed8:	09 f4       	brne	.+2      	; 0xedc <__ultoa_invert+0x48>
 eda:	68 94       	set
 edc:	3f 91       	pop	r19
 ede:	2a e0       	ldi	r18, 0x0A	; 10
 ee0:	26 9f       	mul	r18, r22
 ee2:	11 24       	eor	r1, r1
 ee4:	30 19       	sub	r19, r0
 ee6:	30 5d       	subi	r19, 0xD0	; 208
 ee8:	31 93       	st	Z+, r19
 eea:	de f6       	brtc	.-74     	; 0xea2 <__ultoa_invert+0xe>
 eec:	cf 01       	movw	r24, r30
 eee:	08 95       	ret
 ef0:	46 2f       	mov	r20, r22
 ef2:	47 70       	andi	r20, 0x07	; 7
 ef4:	40 5d       	subi	r20, 0xD0	; 208
 ef6:	41 93       	st	Z+, r20
 ef8:	b3 e0       	ldi	r27, 0x03	; 3
 efa:	0f d0       	rcall	.+30     	; 0xf1a <__ultoa_invert+0x86>
 efc:	c9 f7       	brne	.-14     	; 0xef0 <__ultoa_invert+0x5c>
 efe:	f6 cf       	rjmp	.-20     	; 0xeec <__ultoa_invert+0x58>
 f00:	46 2f       	mov	r20, r22
 f02:	4f 70       	andi	r20, 0x0F	; 15
 f04:	40 5d       	subi	r20, 0xD0	; 208
 f06:	4a 33       	cpi	r20, 0x3A	; 58
 f08:	18 f0       	brcs	.+6      	; 0xf10 <__ultoa_invert+0x7c>
 f0a:	49 5d       	subi	r20, 0xD9	; 217
 f0c:	31 fd       	sbrc	r19, 1
 f0e:	40 52       	subi	r20, 0x20	; 32
 f10:	41 93       	st	Z+, r20
 f12:	02 d0       	rcall	.+4      	; 0xf18 <__ultoa_invert+0x84>
 f14:	a9 f7       	brne	.-22     	; 0xf00 <__ultoa_invert+0x6c>
 f16:	ea cf       	rjmp	.-44     	; 0xeec <__ultoa_invert+0x58>
 f18:	b4 e0       	ldi	r27, 0x04	; 4
 f1a:	a6 95       	lsr	r26
 f1c:	97 95       	ror	r25
 f1e:	87 95       	ror	r24
 f20:	77 95       	ror	r23
 f22:	67 95       	ror	r22
 f24:	ba 95       	dec	r27
 f26:	c9 f7       	brne	.-14     	; 0xf1a <__ultoa_invert+0x86>
 f28:	00 97       	sbiw	r24, 0x00	; 0
 f2a:	61 05       	cpc	r22, r1
 f2c:	71 05       	cpc	r23, r1
 f2e:	08 95       	ret
 f30:	9b 01       	movw	r18, r22
 f32:	ac 01       	movw	r20, r24
 f34:	0a 2e       	mov	r0, r26
 f36:	06 94       	lsr	r0
 f38:	57 95       	ror	r21
 f3a:	47 95       	ror	r20
 f3c:	37 95       	ror	r19
 f3e:	27 95       	ror	r18
 f40:	ba 95       	dec	r27
 f42:	c9 f7       	brne	.-14     	; 0xf36 <__ultoa_invert+0xa2>
 f44:	62 0f       	add	r22, r18
 f46:	73 1f       	adc	r23, r19
 f48:	84 1f       	adc	r24, r20
 f4a:	95 1f       	adc	r25, r21
 f4c:	a0 1d       	adc	r26, r0
 f4e:	08 95       	ret

00000f50 <__prologue_saves__>:
 f50:	2f 92       	push	r2
 f52:	3f 92       	push	r3
 f54:	4f 92       	push	r4
 f56:	5f 92       	push	r5
 f58:	6f 92       	push	r6
 f5a:	7f 92       	push	r7
 f5c:	8f 92       	push	r8
 f5e:	9f 92       	push	r9
 f60:	af 92       	push	r10
 f62:	bf 92       	push	r11
 f64:	cf 92       	push	r12
 f66:	df 92       	push	r13
 f68:	ef 92       	push	r14
 f6a:	ff 92       	push	r15
 f6c:	0f 93       	push	r16
 f6e:	1f 93       	push	r17
 f70:	cf 93       	push	r28
 f72:	df 93       	push	r29
 f74:	cd b7       	in	r28, 0x3d	; 61
 f76:	de b7       	in	r29, 0x3e	; 62
 f78:	ca 1b       	sub	r28, r26
 f7a:	db 0b       	sbc	r29, r27
 f7c:	0f b6       	in	r0, 0x3f	; 63
 f7e:	f8 94       	cli
 f80:	de bf       	out	0x3e, r29	; 62
 f82:	0f be       	out	0x3f, r0	; 63
 f84:	cd bf       	out	0x3d, r28	; 61
 f86:	09 94       	ijmp

00000f88 <__epilogue_restores__>:
 f88:	2a 88       	ldd	r2, Y+18	; 0x12
 f8a:	39 88       	ldd	r3, Y+17	; 0x11
 f8c:	48 88       	ldd	r4, Y+16	; 0x10
 f8e:	5f 84       	ldd	r5, Y+15	; 0x0f
 f90:	6e 84       	ldd	r6, Y+14	; 0x0e
 f92:	7d 84       	ldd	r7, Y+13	; 0x0d
 f94:	8c 84       	ldd	r8, Y+12	; 0x0c
 f96:	9b 84       	ldd	r9, Y+11	; 0x0b
 f98:	aa 84       	ldd	r10, Y+10	; 0x0a
 f9a:	b9 84       	ldd	r11, Y+9	; 0x09
 f9c:	c8 84       	ldd	r12, Y+8	; 0x08
 f9e:	df 80       	ldd	r13, Y+7	; 0x07
 fa0:	ee 80       	ldd	r14, Y+6	; 0x06
 fa2:	fd 80       	ldd	r15, Y+5	; 0x05
 fa4:	0c 81       	ldd	r16, Y+4	; 0x04
 fa6:	1b 81       	ldd	r17, Y+3	; 0x03
 fa8:	aa 81       	ldd	r26, Y+2	; 0x02
 faa:	b9 81       	ldd	r27, Y+1	; 0x01
 fac:	ce 0f       	add	r28, r30
 fae:	d1 1d       	adc	r29, r1
 fb0:	0f b6       	in	r0, 0x3f	; 63
 fb2:	f8 94       	cli
 fb4:	de bf       	out	0x3e, r29	; 62
 fb6:	0f be       	out	0x3f, r0	; 63
 fb8:	cd bf       	out	0x3d, r28	; 61
 fba:	ed 01       	movw	r28, r26
 fbc:	08 95       	ret

00000fbe <_exit>:
 fbe:	f8 94       	cli

00000fc0 <__stop_program>:
 fc0:	ff cf       	rjmp	.-2      	; 0xfc0 <__stop_program>
